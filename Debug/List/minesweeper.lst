
AVRASM ver. 2.1.30  C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm Tue May 24 21:57:29 2022

C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1090): warning: Register r3 already defined by the .DEF directive
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1091): warning: Register r4 already defined by the .DEF directive
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1092): warning: Register r5 already defined by the .DEF directive
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1093): warning: Register r6 already defined by the .DEF directive
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1094): warning: Register r7 already defined by the .DEF directive
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1095): warning: Register r8 already defined by the .DEF directive
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1096): warning: Register r10 already defined by the .DEF directive
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1097): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _seed=R3
                 	.DEF _seed_msb=R4
                 	.DEF _flagIndex=R5
                 	.DEF _flagIndex_msb=R6
                 	.DEF _bombCount=R7
                 	.DEF _bombCount_msb=R8
                 	.DEF _inPlay=R10
                 	.DEF _firstMove=R9
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 014b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 _font5x7:
00003e 0705
00003f 6020
000040 0000
000041 0000      	.DB  0x5,0x7,0x20,0x60,0x0,0x0,0x0,0x0
000042 0000
000043 5f00
000044 0000
000045 0700      	.DB  0x0,0x0,0x0,0x5F,0x0,0x0,0x0,0x7
000046 0700
000047 1400
000048 147f
000049 147f      	.DB  0x0,0x7,0x0,0x14,0x7F,0x14,0x7F,0x14
00004a 2a24
00004b 2a7f
00004c 2312
00004d 0813      	.DB  0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x8
00004e 6264
00004f 4936
000050 2255
000051 0050      	.DB  0x64,0x62,0x36,0x49,0x55,0x22,0x50,0x0
000052 0305
000053 0000
000054 1c00
000055 4122      	.DB  0x5,0x3,0x0,0x0,0x0,0x1C,0x22,0x41
000056 0000
000057 2241
000058 001c
000059 2a08      	.DB  0x0,0x0,0x41,0x22,0x1C,0x0,0x8,0x2A
00005a 2a1c
00005b 0808
00005c 3e08
00005d 0808      	.DB  0x1C,0x2A,0x8,0x8,0x8,0x3E,0x8,0x8
00005e 5000
00005f 0030
000060 0800
000061 0808      	.DB  0x0,0x50,0x30,0x0,0x0,0x8,0x8,0x8
000062 0808
000063 3000
000064 0030
000065 2000      	.DB  0x8,0x8,0x0,0x30,0x30,0x0,0x0,0x20
000066 0810
000067 0204
000068 513e
000069 4549      	.DB  0x10,0x8,0x4,0x2,0x3E,0x51,0x49,0x45
00006a 003e
00006b 7f42
00006c 0040
00006d 6142      	.DB  0x3E,0x0,0x42,0x7F,0x40,0x0,0x42,0x61
00006e 4951
00006f 2146
000070 4541
000071 314b      	.DB  0x51,0x49,0x46,0x21,0x41,0x45,0x4B,0x31
000072 1418
000073 7f12
000074 2710
000075 4545      	.DB  0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45
000076 3945
000077 4a3c
000078 4949
000079 0130      	.DB  0x45,0x39,0x3C,0x4A,0x49,0x49,0x30,0x1
00007a 0971
00007b 0305
00007c 4936
00007d 4949      	.DB  0x71,0x9,0x5,0x3,0x36,0x49,0x49,0x49
00007e 0636
00007f 4949
000080 1e29
000081 3600      	.DB  0x36,0x6,0x49,0x49,0x29,0x1E,0x0,0x36
000082 0036
000083 0000
000084 3656
000085 0000      	.DB  0x36,0x0,0x0,0x0,0x56,0x36,0x0,0x0
000086 0800
000087 2214
000088 1441
000089 1414      	.DB  0x0,0x8,0x14,0x22,0x41,0x14,0x14,0x14
00008a 1414
00008b 2241
00008c 0814
00008d 0200      	.DB  0x14,0x14,0x41,0x22,0x14,0x8,0x0,0x2
00008e 5101
00008f 0609
000090 4932
000091 4179      	.DB  0x1,0x51,0x9,0x6,0x32,0x49,0x79,0x41
000092 7e3e
000093 1111
000094 7e11
000095 497f      	.DB  0x3E,0x7E,0x11,0x11,0x11,0x7E,0x7F,0x49
000096 4949
000097 3e36
000098 4141
000099 2241      	.DB  0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22
00009a 417f
00009b 2241
00009c 7f1c
00009d 4949      	.DB  0x7F,0x41,0x41,0x22,0x1C,0x7F,0x49,0x49
00009e 4149
00009f 097f
0000a0 0109
0000a1 3e01      	.DB  0x49,0x41,0x7F,0x9,0x9,0x1,0x1,0x3E
0000a2 4141
0000a3 3251
0000a4 087f
0000a5 0808      	.DB  0x41,0x41,0x51,0x32,0x7F,0x8,0x8,0x8
0000a6 007f
0000a7 7f41
0000a8 0041
0000a9 4020      	.DB  0x7F,0x0,0x41,0x7F,0x41,0x0,0x20,0x40
0000aa 3f41
0000ab 7f01
0000ac 1408
0000ad 4122      	.DB  0x41,0x3F,0x1,0x7F,0x8,0x14,0x22,0x41
0000ae 407f
0000af 4040
0000b0 7f40
0000b1 0402      	.DB  0x7F,0x40,0x40,0x40,0x40,0x7F,0x2,0x4
0000b2 7f02
0000b3 047f
0000b4 1008
0000b5 3e7f      	.DB  0x2,0x7F,0x7F,0x4,0x8,0x10,0x7F,0x3E
0000b6 4141
0000b7 3e41
0000b8 097f
0000b9 0909      	.DB  0x41,0x41,0x41,0x3E,0x7F,0x9,0x9,0x9
0000ba 3e06
0000bb 5141
0000bc 5e21
0000bd 097f      	.DB  0x6,0x3E,0x41,0x51,0x21,0x5E,0x7F,0x9
0000be 2919
0000bf 4646
0000c0 4949
0000c1 3149      	.DB  0x19,0x29,0x46,0x46,0x49,0x49,0x49,0x31
0000c2 0101
0000c3 017f
0000c4 3f01
0000c5 4040      	.DB  0x1,0x1,0x7F,0x1,0x1,0x3F,0x40,0x40
0000c6 3f40
0000c7 201f
0000c8 2040
0000c9 7f1f      	.DB  0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F,0x7F
0000ca 1820
0000cb 7f20
0000cc 1463
0000cd 1408      	.DB  0x20,0x18,0x20,0x7F,0x63,0x14,0x8,0x14
0000ce 0363
0000cf 7804
0000d0 0304
0000d1 5161      	.DB  0x63,0x3,0x4,0x78,0x4,0x3,0x61,0x51
0000d2 4549
0000d3 0043
0000d4 7f00
0000d5 4141      	.DB  0x49,0x45,0x43,0x0,0x0,0x7F,0x41,0x41
0000d6 0402
0000d7 1008
0000d8 4120
0000d9 7f41      	.DB  0x2,0x4,0x8,0x10,0x20,0x41,0x41,0x7F
0000da 0000
0000db 0204
0000dc 0201
0000dd 4004      	.DB  0x0,0x0,0x4,0x2,0x1,0x2,0x4,0x40
0000de 4040
0000df 4040
0000e0 0100
0000e1 0402      	.DB  0x40,0x40,0x40,0x40,0x0,0x1,0x2,0x4
0000e2 2000
0000e3 5454
0000e4 7854
0000e5 487f      	.DB  0x0,0x20,0x54,0x54,0x54,0x78,0x7F,0x48
0000e6 4444
0000e7 3838
0000e8 4444
0000e9 2044      	.DB  0x44,0x44,0x38,0x38,0x44,0x44,0x44,0x20
0000ea 4438
0000eb 4844
0000ec 387f
0000ed 5454      	.DB  0x38,0x44,0x44,0x48,0x7F,0x38,0x54,0x54
0000ee 1854
0000ef 7e08
0000f0 0109
0000f1 0802      	.DB  0x54,0x18,0x8,0x7E,0x9,0x1,0x2,0x8
0000f2 5414
0000f3 3c54
0000f4 087f
0000f5 0404      	.DB  0x14,0x54,0x54,0x3C,0x7F,0x8,0x4,0x4
0000f6 0078
0000f7 7d44
0000f8 0040
0000f9 4020      	.DB  0x78,0x0,0x44,0x7D,0x40,0x0,0x20,0x40
0000fa 3d44
0000fb 0000
0000fc 107f
0000fd 4428      	.DB  0x44,0x3D,0x0,0x0,0x7F,0x10,0x28,0x44
0000fe 4100
0000ff 407f
000100 7c00
000101 1804      	.DB  0x0,0x41,0x7F,0x40,0x0,0x7C,0x4,0x18
000102 7804
000103 087c
000104 0404
000105 3878      	.DB  0x4,0x78,0x7C,0x8,0x4,0x4,0x78,0x38
000106 4444
000107 3844
000108 147c
000109 1414      	.DB  0x44,0x44,0x44,0x38,0x7C,0x14,0x14,0x14
00010a 0808
00010b 1414
00010c 7c18
00010d 087c      	.DB  0x8,0x8,0x14,0x14,0x18,0x7C,0x7C,0x8
00010e 0404
00010f 4808
000110 5454
000111 2054      	.DB  0x4,0x4,0x8,0x48,0x54,0x54,0x54,0x20
000112 3f04
000113 4044
000114 3c20
000115 4040      	.DB  0x4,0x3F,0x44,0x40,0x20,0x3C,0x40,0x40
000116 7c20
000117 201c
000118 2040
000119 3c1c      	.DB  0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C
00011a 3040
00011b 3c40
00011c 2844
00011d 2810      	.DB  0x40,0x30,0x40,0x3C,0x44,0x28,0x10,0x28
00011e 0c44
00011f 5050
000120 3c50
000121 6444      	.DB  0x44,0xC,0x50,0x50,0x50,0x3C,0x44,0x64
000122 4c54
000123 0044
000124 3608
000125 0041      	.DB  0x54,0x4C,0x44,0x0,0x8,0x36,0x41,0x0
000126 0000
000127 007f
000128 0000
000129 3641      	.DB  0x0,0x0,0x7F,0x0,0x0,0x0,0x41,0x36
00012a 0008
00012b 0102
00012c 0402
00012d 7f02      	.DB  0x8,0x0,0x2,0x1,0x2,0x4,0x2,0x7F
00012e 4141
00012f 7f41      	.DB  0x41,0x41,0x41,0x7F
                 _gameOverText:
000130 4f4c
000131 4553
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1204): warning: .cseg .db misalignment - padding zero byte
000132 0000      	.DB  0x4C,0x4F,0x53,0x45,0x0
                 _gameWonText:
000133 4957
000134 004e      	.DB  0x57,0x49,0x4E,0x0
                 __glcd_mask:
000135 0100
000136 0703
000137 1f0f
000138 7f3f      	.DB  0x0,0x1,0x3,0x7,0xF,0x1F,0x3F,0x7F
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1209): warning: .cseg .db misalignment - padding zero byte
000139 00ff      	.DB  0xFF
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00013a 0000
00013b 0000      	.DB  0x0,0x0,0x0,0x0
00013c 0000
00013d 0101      	.DB  0x0,0x0,0x1,0x1
                 
                 _0x20C0060:
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1217): warning: .cseg .db misalignment - padding zero byte
00013e 0001      	.DB  0x1
                 _0x20C0000:
00013f 4e2d
000140 4e41
000141 4900
000142 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\alexc\Desktop\p2\Debug\List\minesweeper.asm(1220): warning: .cseg .db misalignment - padding zero byte
000143 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000144 0008      	.DW  0x08
000145 0003      	.DW  0x03
000146 0274      	.DW  __REG_VARS*2
                 
000147 0001      	.DW  0x01
000148 04ce      	.DW  __seed_G106
000149 027c      	.DW  _0x20C0060*2
                 
                 _0xFFFFFFFF:
00014a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00014b 94f8      	CLI
00014c 27ee      	CLR  R30
00014d bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00014e e0f1      	LDI  R31,1
00014f bff5      	OUT  MCUCR,R31
000150 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000151 e08d      	LDI  R24,(14-2)+1
000152 e0a2      	LDI  R26,2
000153 27bb      	CLR  R27
                 __CLEAR_REG:
000154 93ed      	ST   X+,R30
000155 958a      	DEC  R24
000156 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000157 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000158 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000159 e0a0      	LDI  R26,LOW(__SRAM_START)
00015a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00015b 93ed      	ST   X+,R30
00015c 9701      	SBIW R24,1
00015d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00015e e8e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00015f e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000160 9185      	LPM  R24,Z+
000161 9195      	LPM  R25,Z+
000162 9700      	SBIW R24,0
000163 f061      	BREQ __GLOBAL_INI_END
000164 91a5      	LPM  R26,Z+
000165 91b5      	LPM  R27,Z+
000166 9005      	LPM  R0,Z+
000167 9015      	LPM  R1,Z+
000168 01bf      	MOVW R22,R30
000169 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00016a 9005      	LPM  R0,Z+
00016b 920d      	ST   X+,R0
00016c 9701      	SBIW R24,1
00016d f7e1      	BRNE __GLOBAL_INI_LOOP
00016e 01fb      	MOVW R30,R22
00016f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000170 e0e0      	LDI  R30,__GPIOR0_INIT
000171 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000172 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000173 bfed      	OUT  SPL,R30
000174 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000175 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000176 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000177 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000178 940c 046e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 ;#include <mega164a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdbool.h>
                 ;#include <glcd.h>
                 ;#include <font5x7.h>
                 ;#include "defs.h"
                 ;
                 ;GLCDINIT_t init;
                 ;unsigned int seed = 0; //pentru numere random
                 ;int flagIndex;  // numarul de flaguri puse
                 ;flash const int bombNumber = 5;
                 ;flash const int flagNumber = 5;
                 ;flash const int cellNumber = 25;
                 ;int bombCount;
                 ;bool inPlay = true; //pentru resetare joc
                 ;bool firstMove = true;
                 ;flash char flag ='f';
                 ;flash char bomb = 'x';
                 ;flash char gameOverText[5] = "LOSE";
                 ;flash char gameWonText[4] = "WIN";
                 ;struct Cell{
                 ;    int row;
                 ;    int col;
                 ;    bool isBomb;
                 ;    bool isFlag;
                 ;    bool isCleared;
                 ;};
                 ;struct Cell cells[5][5]; //placa de joc
                 ;//initializare celule si resetare atribute pentru fiecare
                 ;void initializeCells(struct Cell cells[5][5]){
                 ; 0000 001E void initializeCells(struct Cell cells[5][5]){
                 
                 	.CSEG
                 _initializeCells:
                 ; .FSTART _initializeCells
                 ; 0000 001F     int i,j;
                 ; 0000 0020     for(i=0; i<5;i++){
00017a 940e 0bd3 	CALL SUBOPT_0x0
                 ;	cells -> Y+4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 _0x4:
                +
00017c 3005     +CPI R16 , LOW ( 5 )
00017d e0e0     +LDI R30 , HIGH ( 5 )
00017e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
00017f f54c      	BRGE _0x5
                 ; 0000 0021         for(j=0;j<5;j++){
                +
000180 e020     +LDI R18 , LOW ( 0 )
000181 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x7:
                +
000182 3025     +CPI R18 , LOW ( 5 )
000183 e0e0     +LDI R30 , HIGH ( 5 )
000184 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
000185 f504      	BRGE _0x8
                 ; 0000 0022             cells[i][j].row = i;
000186 940e 0bda 	CALL SUBOPT_0x1
000188 8300      	ST   Z,R16
000189 8311      	STD  Z+1,R17
                 ; 0000 0023             cells[i][j].col = j;
00018a 940e 0bda 	CALL SUBOPT_0x1
                +
00018c 8322     +STD Z + 2 , R18
00018d 8333     +STD Z + 2 + 1 , R19
                 	__PUTWZR 18,19,2
                 ; 0000 0024             cells[i][j].isBomb = false;
00018e 940e 0bed 	CALL SUBOPT_0x2
000190 0fae      	ADD  R26,R30
000191 1fbf      	ADC  R27,R31
000192 9614      	ADIW R26,4
000193 e0e0      	LDI  R30,LOW(0)
000194 93ec      	ST   X,R30
                 ; 0000 0025             cells[i][j].isFlag = false;
000195 940e 0bed 	CALL SUBOPT_0x2
000197 0fae      	ADD  R26,R30
000198 1fbf      	ADC  R27,R31
000199 9615      	ADIW R26,5
00019a e0e0      	LDI  R30,LOW(0)
00019b 93ec      	ST   X,R30
                 ; 0000 0026             cells[i][j].isCleared = false;
00019c 940e 0bed 	CALL SUBOPT_0x2
00019e 0fae      	ADD  R26,R30
00019f 1fbf      	ADC  R27,R31
0001a0 9616      	ADIW R26,6
0001a1 e0e0      	LDI  R30,LOW(0)
0001a2 93ec      	ST   X,R30
                 ; 0000 0027         }
                +
0001a3 5f2f     +SUBI R18 , LOW ( - 1 )
0001a4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001a5 cfdc      	RJMP _0x7
                 _0x8:
                 ; 0000 0028     }
                +
0001a6 5f0f     +SUBI R16 , LOW ( - 1 )
0001a7 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001a8 cfd3      	RJMP _0x4
                 _0x5:
                 ; 0000 0029 }
0001a9 940e 0e57 	CALL __LOADLOCR4
0001ab c118      	RJMP _0x210000D
                 ; .FEND
                 ;//desenarea unui patrat
                 ;void drawCell(int x, int y){
                 ; 0000 002B void drawCell(int x, int y){
                 _drawCell:
                 ; .FSTART _drawCell
                 ; 0000 002C     x = 2+16*x; // cursor -> pixel
0001ac 93ba      	ST   -Y,R27
0001ad 93aa      	ST   -Y,R26
                 ;	x -> Y+2
                 ;	y -> Y+0
0001ae 81ea      	LDD  R30,Y+2
0001af 81fb      	LDD  R31,Y+2+1
0001b0 940e 0ddc 	CALL __LSLW4
0001b2 9632      	ADIW R30,2
0001b3 83ea      	STD  Y+2,R30
0001b4 83fb      	STD  Y+2+1,R31
                 ; 0000 002D     y = 2+9*y;
0001b5 81e8      	LD   R30,Y
0001b6 81f9      	LDD  R31,Y+1
0001b7 e0a9      	LDI  R26,LOW(9)
0001b8 e0b0      	LDI  R27,HIGH(9)
0001b9 940e 0ded 	CALL __MULW12
0001bb 9632      	ADIW R30,2
0001bc 83e8      	ST   Y,R30
0001bd 83f9      	STD  Y+1,R31
                 ; 0000 002E     //linii orizontale
                 ; 0000 002F     glcd_line(x,y,x+16,y);
0001be 81ea      	LDD  R30,Y+2
0001bf 940e 0bff 	CALL SUBOPT_0x3
0001c1 5fe0      	SUBI R30,-LOW(16)
0001c2 93ea      	ST   -Y,R30
0001c3 81ab      	LDD  R26,Y+3
0001c4 940e 0a5c 	CALL _glcd_line
                 ; 0000 0030     glcd_line(x,y+9,x+16,y+9);
0001c6 81ea      	LDD  R30,Y+2
0001c7 93ea      	ST   -Y,R30
0001c8 81e9      	LDD  R30,Y+1
0001c9 5fe7      	SUBI R30,-LOW(9)
0001ca 93ea      	ST   -Y,R30
0001cb 81ec      	LDD  R30,Y+4
0001cc 940e 0c04 	CALL SUBOPT_0x4
                 ; 0000 0031     //linii verticale
                 ; 0000 0032     glcd_line(x,y,x,y+9);
0001ce 81ea      	LDD  R30,Y+2
0001cf 940e 0bff 	CALL SUBOPT_0x3
0001d1 93ea      	ST   -Y,R30
0001d2 81ab      	LDD  R26,Y+3
0001d3 5fa7      	SUBI R26,-LOW(9)
0001d4 940e 0a5c 	CALL _glcd_line
                 ; 0000 0033     glcd_line(x+16,y,x+16,y+9);
0001d6 81ea      	LDD  R30,Y+2
0001d7 5fe0      	SUBI R30,-LOW(16)
0001d8 940e 0bff 	CALL SUBOPT_0x3
0001da 940e 0c04 	CALL SUBOPT_0x4
                 ; 0000 0034 }
0001dc c072      	RJMP _0x210000E
                 ; .FEND
                 ;//display celula normala
                 ;void displayCell(int x, int y){
                 ; 0000 0036 void displayCell(int x, int y){
                 _displayCell:
                 ; .FSTART _displayCell
                 ; 0000 0037 
                 ; 0000 0038     glcd_setlinestyle(1, GLCD_LINE_SOLID);
0001dd 93ba      	ST   -Y,R27
0001de 93aa      	ST   -Y,R26
                 ;	x -> Y+2
                 ;	y -> Y+0
0001df 940e 0c0a 	CALL SUBOPT_0x5
                 ; 0000 0039     drawCell(x,y);
0001e1 940e 0c11 	CALL SUBOPT_0x6
                 ; 0000 003A 
                 ; 0000 003B }
0001e3 c06b      	RJMP _0x210000E
                 ; .FEND
                 ;//display cursor
                 ;void displayCursor(int x, int y){
                 ; 0000 003D void displayCursor(int x, int y){
                 _displayCursor:
                 ; .FSTART _displayCursor
                 ; 0000 003E     glcd_setlinestyle(1, GLCD_LINE_DOT_LARGE);
0001e4 93ba      	ST   -Y,R27
0001e5 93aa      	ST   -Y,R26
                 ;	x -> Y+2
                 ;	y -> Y+0
0001e6 e0e1      	LDI  R30,LOW(1)
                +
0001e7 93e0 0208+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
0001e9 e3e3      	LDI  R30,LOW(51)
                +
0001ea 93e0 0209+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
                 ; 0000 003F     drawCell(x,y);
0001ec 940e 0c11 	CALL SUBOPT_0x6
                 ; 0000 0040 }
0001ee c060      	RJMP _0x210000E
                 ; .FEND
                 ;//display 5x5 celule normale
                 ;void displayBoard(int x, int y){
                 ; 0000 0042 void displayBoard(int x, int y){
                 _displayBoard:
                 ; .FSTART _displayBoard
                 ; 0000 0043     int i,j;
                 ; 0000 0044     for(i = 0; i<5; i++){
0001ef 940e 0bd3 	CALL SUBOPT_0x0
                 ;	x -> Y+6
                 ;	y -> Y+4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 _0xA:
                +
0001f1 3005     +CPI R16 , LOW ( 5 )
0001f2 e0e0     +LDI R30 , HIGH ( 5 )
0001f3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
0001f4 f4e4      	BRGE _0xB
                 ; 0000 0045         for(j = 0; j < 5; j++){
                +
0001f5 e020     +LDI R18 , LOW ( 0 )
0001f6 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0xD:
                +
0001f7 3025     +CPI R18 , LOW ( 5 )
0001f8 e0e0     +LDI R30 , HIGH ( 5 )
0001f9 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
0001fa f49c      	BRGE _0xE
                 ; 0000 0046             if(i == x && j == y)
0001fb 81ee      	LDD  R30,Y+6
0001fc 81ff      	LDD  R31,Y+6+1
0001fd 17e0      	CP   R30,R16
0001fe 07f1      	CPC  R31,R17
0001ff f429      	BRNE _0x10
000200 81ec      	LDD  R30,Y+4
000201 81fd      	LDD  R31,Y+4+1
000202 17e2      	CP   R30,R18
000203 07f3      	CPC  R31,R19
000204 f009      	BREQ _0x11
                 _0x10:
000205 c001      	RJMP _0xF
                 _0x11:
                 ; 0000 0047                 continue;
000206 c004      	RJMP _0xC
                 ; 0000 0048             displayCell(i,j);
                 _0xF:
000207 931a      	ST   -Y,R17
000208 930a      	ST   -Y,R16
000209 01d9      	MOVW R26,R18
00020a dfd2      	RCALL _displayCell
                 ; 0000 0049         }
                 _0xC:
                +
00020b 5f2f     +SUBI R18 , LOW ( - 1 )
00020c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00020d cfe9      	RJMP _0xD
                 _0xE:
                 ; 0000 004A     }
                +
00020e 5f0f     +SUBI R16 , LOW ( - 1 )
00020f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000210 cfe0      	RJMP _0xA
                 _0xB:
                 ; 0000 004B }
000211 940e 0e57 	CALL __LOADLOCR4
000213 c22a      	RJMP _0x210000C
                 ; .FEND
                 ;//generator de bombe cu seed randomizat
                 ;void generateBombs(struct Cell cells[5][5]){
                 ; 0000 004D void generateBombs(struct Cell cells[5][5]){
                 _generateBombs:
                 ; .FSTART _generateBombs
                 ; 0000 004E     int i;
                 ; 0000 004F     for(i = 0; i < bombNumber;){
000214 93ba      	ST   -Y,R27
000215 93aa      	ST   -Y,R26
000216 931a      	ST   -Y,R17
000217 930a      	ST   -Y,R16
                 ;	cells -> Y+2
                 ;	i -> R16,R17
                +
000218 e000     +LDI R16 , LOW ( 0 )
000219 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x13:
                +
00021a 3005     +CPI R16 , LOW ( 5 )
00021b e0e0     +LDI R30 , HIGH ( 5 )
00021c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
00021d f57c      	BRGE _0x14
                 ; 0000 0050         int x = seed % 25;
                 ; 0000 0051         int xPos = x / 5;
                 ; 0000 0052         int yPos = x % 5;
                 ; 0000 0053         if(cells[xPos][yPos].isBomb == false){
00021e 9726      	SBIW R28,6
                 ;	cells -> Y+8
                 ;	x -> Y+4
                 ;	xPos -> Y+2
                 ;	yPos -> Y+0
                +
00021f 2da3     +MOV R26 , R3
000220 2db4     +MOV R27 , R4
                 	__GETW2R 3,4
000221 e1e9      	LDI  R30,LOW(25)
000222 e0f0      	LDI  R31,HIGH(25)
000223 940e 0e0a 	CALL __MODW21U
000225 83ec      	STD  Y+4,R30
000226 83fd      	STD  Y+4+1,R31
000227 81ac      	LDD  R26,Y+4
000228 81bd      	LDD  R27,Y+4+1
000229 e0e5      	LDI  R30,LOW(5)
00022a e0f0      	LDI  R31,HIGH(5)
00022b 940e 0e05 	CALL __DIVW21
00022d 83ea      	STD  Y+2,R30
00022e 83fb      	STD  Y+2+1,R31
00022f 81ac      	LDD  R26,Y+4
000230 81bd      	LDD  R27,Y+4+1
000231 e0e5      	LDI  R30,LOW(5)
000232 e0f0      	LDI  R31,HIGH(5)
000233 940e 0e0d 	CALL __MODW21
000235 83e8      	ST   Y,R30
000236 83f9      	STD  Y+1,R31
000237 940e 0c19 	CALL SUBOPT_0x7
000239 91ec      	LD   R30,X
00023a 30e0      	CPI  R30,0
00023b f431      	BRNE _0x15
                 ; 0000 0054             cells[xPos][yPos].isBomb = true;
00023c 940e 0c19 	CALL SUBOPT_0x7
00023e e0e1      	LDI  R30,LOW(1)
00023f 93ec      	ST   X,R30
                 ; 0000 0055             i++;
                +
000240 5f0f     +SUBI R16 , LOW ( - 1 )
000241 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0056         }
                 ; 0000 0057         seed = seed*3 + 7;
                 _0x15:
                +
000242 2de3     +MOV R30 , R3
000243 2df4     +MOV R31 , R4
                 	__GETW1R 3,4
000244 e0a3      	LDI  R26,LOW(3)
000245 e0b0      	LDI  R27,HIGH(3)
000246 940e 0de5 	CALL __MULW12U
000248 9637      	ADIW R30,7
                +
000249 2e3e     +MOV R3 , R30
00024a 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 0058     }
00024b 9626      	ADIW R28,6
00024c cfcd      	RJMP _0x13
                 _0x14:
                 ; 0000 0059 }
00024d 8119      	LDD  R17,Y+1
00024e 8108      	LDD  R16,Y+0
                 _0x210000E:
00024f 9624      	ADIW R28,4
000250 9508      	RET
                 ; .FEND
                 ;//numara bombele din celulele alaturate si returneaza numarul ca un char
                 ;//pentru display
                 ;char adjacentBombs(int x,int y, struct Cell cells[5][5]){
                 ; 0000 005C char adjacentBombs(int x,int y, struct Cell cells[5][5]){
                 _adjacentBombs:
                 ; .FSTART _adjacentBombs
                 ; 0000 005D     bombCount = 0;
000251 93ba      	ST   -Y,R27
000252 93aa      	ST   -Y,R26
                 ;	x -> Y+4
                 ;	y -> Y+2
                 ;	cells -> Y+0
000253 2477      	CLR  R7
000254 2488      	CLR  R8
                 ; 0000 005E         if(x-1 >=0 && cells[x-1][y].isBomb)    //left
000255 940e 0c30 	CALL SUBOPT_0x8
000257 f02a      	BRMI _0x17
000258 940e 0c35 	CALL SUBOPT_0x9
00025a 940e 0c40 	CALL SUBOPT_0xA
00025c f409      	BRNE _0x18
                 _0x17:
00025d c002      	RJMP _0x16
                 _0x18:
                 ; 0000 005F             bombCount++;
00025e 940e 0c50 	CALL SUBOPT_0xB
                 ; 0000 0060         if(x+1 <5 && cells[x+1][y].isBomb)    //right
                 _0x16:
000260 940e 0c55 	CALL SUBOPT_0xC
000262 f42c      	BRGE _0x1A
000263 940e 0c5a 	CALL SUBOPT_0xD
000265 940e 0c40 	CALL SUBOPT_0xA
000267 f409      	BRNE _0x1B
                 _0x1A:
000268 c002      	RJMP _0x19
                 _0x1B:
                 ; 0000 0061             bombCount++;
000269 940e 0c50 	CALL SUBOPT_0xB
                 ; 0000 0062         if(y-1 >= 0 && cells[x][y-1].isBomb)     //up
                 _0x19:
00026b 940e 0c65 	CALL SUBOPT_0xE
00026d f02a      	BRMI _0x1D
00026e 940e 0c6a 	CALL SUBOPT_0xF
000270 940e 0c78 	CALL SUBOPT_0x10
000272 f409      	BRNE _0x1E
                 _0x1D:
000273 c002      	RJMP _0x1C
                 _0x1E:
                 ; 0000 0063             bombCount++;
000274 940e 0c50 	CALL SUBOPT_0xB
                 ; 0000 0064         if(y+1 <5 && cells[x][y+1].isBomb)     //down
                 _0x1C:
000276 940e 0c85 	CALL SUBOPT_0x11
000278 f42c      	BRGE _0x20
000279 940e 0c6a 	CALL SUBOPT_0xF
00027b 940e 0c8a 	CALL SUBOPT_0x12
00027d f409      	BRNE _0x21
                 _0x20:
00027e c002      	RJMP _0x1F
                 _0x21:
                 ; 0000 0065             bombCount++;
00027f 940e 0c50 	CALL SUBOPT_0xB
                 ; 0000 0066         if(x-1 >= 0 && y-1 >=0 && cells[x-1][y-1].isBomb)    //left up
                 _0x1F:
000281 940e 0c30 	CALL SUBOPT_0x8
000283 f042      	BRMI _0x23
000284 940e 0c65 	CALL SUBOPT_0xE
000286 f02a      	BRMI _0x23
000287 940e 0c35 	CALL SUBOPT_0x9
000289 940e 0c97 	CALL SUBOPT_0x13
00028b f409      	BRNE _0x24
                 _0x23:
00028c c002      	RJMP _0x22
                 _0x24:
                 ; 0000 0067             bombCount++;
00028d 940e 0c50 	CALL SUBOPT_0xB
                 ; 0000 0068         if(x+1<5 && y-1 >=0 && cells[x+1][y-1].isBomb)    //right up
                 _0x22:
00028f 940e 0c55 	CALL SUBOPT_0xC
000291 f444      	BRGE _0x26
000292 940e 0c65 	CALL SUBOPT_0xE
000294 f02a      	BRMI _0x26
000295 940e 0c5a 	CALL SUBOPT_0xD
000297 940e 0c97 	CALL SUBOPT_0x13
000299 f409      	BRNE _0x27
                 _0x26:
00029a c002      	RJMP _0x25
                 _0x27:
                 ; 0000 0069             bombCount++;
00029b 940e 0c50 	CALL SUBOPT_0xB
                 ; 0000 006A         if(x-1 >= 0 && y+1 < 5 && cells[x-1][y+1].isBomb)     //left down
                 _0x25:
00029d 940e 0c30 	CALL SUBOPT_0x8
00029f f042      	BRMI _0x29
0002a0 940e 0c85 	CALL SUBOPT_0x11
0002a2 f42c      	BRGE _0x29
0002a3 940e 0c35 	CALL SUBOPT_0x9
0002a5 940e 0c9c 	CALL SUBOPT_0x14
0002a7 f409      	BRNE _0x2A
                 _0x29:
0002a8 c002      	RJMP _0x28
                 _0x2A:
                 ; 0000 006B             bombCount++;
0002a9 940e 0c50 	CALL SUBOPT_0xB
                 ; 0000 006C         if(x+1 <5 && y+1 <5 && cells[x+1][y+1].isBomb)     //right down
                 _0x28:
0002ab 940e 0c55 	CALL SUBOPT_0xC
0002ad f444      	BRGE _0x2C
0002ae 940e 0c85 	CALL SUBOPT_0x11
0002b0 f42c      	BRGE _0x2C
0002b1 940e 0c5a 	CALL SUBOPT_0xD
0002b3 940e 0c9c 	CALL SUBOPT_0x14
0002b5 f409      	BRNE _0x2D
                 _0x2C:
0002b6 c002      	RJMP _0x2B
                 _0x2D:
                 ; 0000 006D             bombCount++;
0002b7 940e 0c50 	CALL SUBOPT_0xB
                 ; 0000 006E     if(bombCount == 0)
                 _0x2B:
0002b9 2c07      	MOV  R0,R7
0002ba 2808      	OR   R0,R8
0002bb f411      	BRNE _0x2E
                 ; 0000 006F         return '0';
0002bc e3e0      	LDI  R30,LOW(48)
0002bd c006      	RJMP _0x210000D
                 ; 0000 0070     if(bombCount == 1)
                 _0x2E:
0002be e0e1      	LDI  R30,LOW(1)
0002bf e0f0      	LDI  R31,HIGH(1)
0002c0 15e7      	CP   R30,R7
0002c1 05f8      	CPC  R31,R8
0002c2 f419      	BRNE _0x2F
                 ; 0000 0071         return '1';
0002c3 e3e1      	LDI  R30,LOW(49)
                 _0x210000D:
0002c4 9626      	ADIW R28,6
0002c5 9508      	RET
                 ; 0000 0072     if(bombCount == 2)
                 _0x2F:
0002c6 e0e2      	LDI  R30,LOW(2)
0002c7 e0f0      	LDI  R31,HIGH(2)
0002c8 15e7      	CP   R30,R7
0002c9 05f8      	CPC  R31,R8
0002ca f419      	BRNE _0x30
                 ; 0000 0073         return '2';
0002cb e3e2      	LDI  R30,LOW(50)
0002cc 940c 0728 	JMP  _0x2100009
                 ; 0000 0074     if(bombCount == 3)
                 _0x30:
0002ce e0e3      	LDI  R30,LOW(3)
0002cf e0f0      	LDI  R31,HIGH(3)
0002d0 15e7      	CP   R30,R7
0002d1 05f8      	CPC  R31,R8
0002d2 f419      	BRNE _0x31
                 ; 0000 0075         return '3';
0002d3 e3e3      	LDI  R30,LOW(51)
0002d4 940c 0728 	JMP  _0x2100009
                 ; 0000 0076     if(bombCount == 4)
                 _0x31:
0002d6 e0e4      	LDI  R30,LOW(4)
0002d7 e0f0      	LDI  R31,HIGH(4)
0002d8 15e7      	CP   R30,R7
0002d9 05f8      	CPC  R31,R8
0002da f419      	BRNE _0x32
                 ; 0000 0077         return '4';
0002db e3e4      	LDI  R30,LOW(52)
0002dc 940c 0728 	JMP  _0x2100009
                 ; 0000 0078     if(bombCount == 5)
                 _0x32:
0002de e0e5      	LDI  R30,LOW(5)
0002df e0f0      	LDI  R31,HIGH(5)
0002e0 15e7      	CP   R30,R7
0002e1 05f8      	CPC  R31,R8
0002e2 f419      	BRNE _0x33
                 ; 0000 0079         return '5';
0002e3 e3e5      	LDI  R30,LOW(53)
0002e4 940c 0728 	JMP  _0x2100009
                 ; 0000 007A     if(bombCount == 6)
                 _0x33:
0002e6 e0e6      	LDI  R30,LOW(6)
0002e7 e0f0      	LDI  R31,HIGH(6)
0002e8 15e7      	CP   R30,R7
0002e9 05f8      	CPC  R31,R8
0002ea f419      	BRNE _0x34
                 ; 0000 007B         return '6';
0002eb e3e6      	LDI  R30,LOW(54)
0002ec 940c 0728 	JMP  _0x2100009
                 ; 0000 007C     if(bombCount == 7)
                 _0x34:
0002ee e0e7      	LDI  R30,LOW(7)
0002ef e0f0      	LDI  R31,HIGH(7)
0002f0 15e7      	CP   R30,R7
0002f1 05f8      	CPC  R31,R8
0002f2 f419      	BRNE _0x35
                 ; 0000 007D         return '7';
0002f3 e3e7      	LDI  R30,LOW(55)
0002f4 940c 0728 	JMP  _0x2100009
                 ; 0000 007E     if(bombCount == 8)
                 _0x35:
0002f6 e0e8      	LDI  R30,LOW(8)
0002f7 e0f0      	LDI  R31,HIGH(8)
0002f8 15e7      	CP   R30,R7
0002f9 05f8      	CPC  R31,R8
0002fa f419      	BRNE _0x36
                 ; 0000 007F         return '8';
0002fb e3e8      	LDI  R30,LOW(56)
0002fc 940c 0728 	JMP  _0x2100009
                 ; 0000 0080 }
                 _0x36:
0002fe 940c 0728 	JMP  _0x2100009
                 ; .FEND
                 ;//display flag, bombe si numar de bombe in celulele alaturate
                 ;void displayCellIndicator(struct Cell cells[5][5]){
                 ; 0000 0082 void displayCellIndicator(struct Cell cells[5][5]){
                 _displayCellIndicator:
                 ; .FSTART _displayCellIndicator
                 ; 0000 0083     int i,j;
                 ; 0000 0084     for(i=0;i<5;i++){
000300 940e 0bd3 	CALL SUBOPT_0x0
                 ;	cells -> Y+4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 _0x38:
                +
000302 3005     +CPI R16 , LOW ( 5 )
000303 e0e0     +LDI R30 , HIGH ( 5 )
000304 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000305 f5ac      	BRGE _0x39
                 ; 0000 0085         for(j=0;j<5;j++){
                +
000306 e020     +LDI R18 , LOW ( 0 )
000307 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x3B:
                +
000308 3025     +CPI R18 , LOW ( 5 )
000309 e0e0     +LDI R30 , HIGH ( 5 )
00030a 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
00030b f564      	BRGE _0x3C
                 ; 0000 0086             if(cells[i][j].isFlag){
00030c 940e 0bed 	CALL SUBOPT_0x2
00030e 940e 0ca1 	CALL SUBOPT_0x15
000310 f029      	BREQ _0x3D
                 ; 0000 0087                 glcd_putcharxy(8+16*i,3+9*j, flag);
000311 940e 0ca7 	CALL SUBOPT_0x16
000313 e6a6      	LDI  R26,LOW(102)
000314 940e 0a18 	CALL _glcd_putcharxy
                 ; 0000 0088             }
                 ; 0000 0089             if(cells[i][j].isBomb){
                 _0x3D:
000316 940e 0bed 	CALL SUBOPT_0x2
000318 0fae      	ADD  R26,R30
000319 1fbf      	ADC  R27,R31
00031a 9614      	ADIW R26,4
00031b 91ec      	LD   R30,X
00031c 30e0      	CPI  R30,0
00031d f029      	BREQ _0x3E
                 ; 0000 008A                 glcd_putcharxy(8+16*i,3+9*j, bomb);
00031e 940e 0ca7 	CALL SUBOPT_0x16
000320 e7a8      	LDI  R26,LOW(120)
000321 940e 0a18 	CALL _glcd_putcharxy
                 ; 0000 008B             }
                 ; 0000 008C             if(cells[i][j].isCleared){
                 _0x3E:
000323 940e 0bed 	CALL SUBOPT_0x2
000325 0fae      	ADD  R26,R30
000326 1fbf      	ADC  R27,R31
000327 9616      	ADIW R26,6
000328 91ec      	LD   R30,X
000329 30e0      	CPI  R30,0
00032a f051      	BREQ _0x3F
                 ; 0000 008D                 glcd_putcharxy(8+16*i,3+9*j, adjacentBombs(i,j, cells));
00032b 940e 0ca7 	CALL SUBOPT_0x16
00032d 940e 0cb2 	CALL SUBOPT_0x17
00032f 85aa      	LDD  R26,Y+10
000330 85bb      	LDD  R27,Y+10+1
000331 df1f      	RCALL _adjacentBombs
000332 2fae      	MOV  R26,R30
000333 940e 0a18 	CALL _glcd_putcharxy
                 ; 0000 008E             }
                 ; 0000 008F         }
                 _0x3F:
                +
000335 5f2f     +SUBI R18 , LOW ( - 1 )
000336 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000337 cfd0      	RJMP _0x3B
                 _0x3C:
                 ; 0000 0090     }
                +
000338 5f0f     +SUBI R16 , LOW ( - 1 )
000339 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00033a cfc7      	RJMP _0x38
                 _0x39:
                 ; 0000 0091 }
00033b 940e 0e57 	CALL __LOADLOCR4
00033d 940c 0728 	JMP  _0x2100009
                 ; .FEND
                 ;//daca celulele alaturate au 0 bombe adiacente se afiseaza 0 si pe ele
                 ;void adjacentClearCells(int x, int y, struct Cell cells[5][5]){
                 ; 0000 0093 void adjacentClearCells(int x, int y, struct Cell cells[5][5]){
                 _adjacentClearCells:
                 ; .FSTART _adjacentClearCells
                 ; 0000 0094     if(x-1 >=0 && adjacentBombs(x-1,y,cells) == '0' && cells[x-1][y].isBomb == false){    //left
00033f 93ba      	ST   -Y,R27
000340 93aa      	ST   -Y,R26
                 ;	x -> Y+4
                 ;	y -> Y+2
                 ;	cells -> Y+0
000341 940e 0c30 	CALL SUBOPT_0x8
000343 f062      	BRMI _0x41
000344 940e 0cb7 	CALL SUBOPT_0x18
000346 940e 0cbd 	CALL SUBOPT_0x19
000348 f439      	BRNE _0x41
000349 940e 0c35 	CALL SUBOPT_0x9
00034b 940e 0cc7 	CALL SUBOPT_0x1A
00034d 940e 0cd2 	CALL SUBOPT_0x1B
00034f f009      	BREQ _0x42
                 _0x41:
000350 c006      	RJMP _0x40
                 _0x42:
                 ; 0000 0095         cells[x-1][y].isCleared = true;
000351 940e 0c35 	CALL SUBOPT_0x9
000353 940e 0cc7 	CALL SUBOPT_0x1A
000355 940e 0cd8 	CALL SUBOPT_0x1C
                 ; 0000 0096     }
                 ; 0000 0097     if(x+1 <5 && adjacentBombs(x+1,y,cells) == '0' && cells[x+1][y].isBomb == false){    //right
                 _0x40:
000357 940e 0c55 	CALL SUBOPT_0xC
000359 f464      	BRGE _0x44
00035a 940e 0cde 	CALL SUBOPT_0x1D
00035c 940e 0cbd 	CALL SUBOPT_0x19
00035e f439      	BRNE _0x44
00035f 940e 0c5a 	CALL SUBOPT_0xD
000361 940e 0cc7 	CALL SUBOPT_0x1A
000363 940e 0cd2 	CALL SUBOPT_0x1B
000365 f009      	BREQ _0x45
                 _0x44:
000366 c006      	RJMP _0x43
                 _0x45:
                 ; 0000 0098         cells[x+1][y].isCleared = true;
000367 940e 0c5a 	CALL SUBOPT_0xD
000369 940e 0cc7 	CALL SUBOPT_0x1A
00036b 940e 0cd8 	CALL SUBOPT_0x1C
                 ; 0000 0099     }
                 ; 0000 009A     if(y-1 >= 0 && adjacentBombs(x,y-1,cells) == '0' && cells[x][y-1].isBomb == false){     //up
                 _0x43:
00036d 940e 0c65 	CALL SUBOPT_0xE
00036f f072      	BRMI _0x47
000370 940e 0ce4 	CALL SUBOPT_0x1E
000372 940e 0cb7 	CALL SUBOPT_0x18
000374 940e 0ce9 	CALL SUBOPT_0x1F
000376 f439      	BRNE _0x47
000377 940e 0c6a 	CALL SUBOPT_0xF
000379 940e 0cef 	CALL SUBOPT_0x20
00037b 940e 0cd2 	CALL SUBOPT_0x1B
00037d f009      	BREQ _0x48
                 _0x47:
00037e c006      	RJMP _0x46
                 _0x48:
                 ; 0000 009B         cells[x][y-1].isCleared = true;
00037f 940e 0c6a 	CALL SUBOPT_0xF
000381 940e 0cef 	CALL SUBOPT_0x20
000383 940e 0cd8 	CALL SUBOPT_0x1C
                 ; 0000 009C     }
                 ; 0000 009D     if(y+1 <5 && adjacentBombs(x,y+1,cells) == '0' && cells[x][y+1].isBomb == false){     //down
                 _0x46:
000385 940e 0c85 	CALL SUBOPT_0x11
000387 f474      	BRGE _0x4A
000388 940e 0ce4 	CALL SUBOPT_0x1E
00038a 940e 0cde 	CALL SUBOPT_0x1D
00038c 940e 0ce9 	CALL SUBOPT_0x1F
00038e f439      	BRNE _0x4A
00038f 940e 0c6a 	CALL SUBOPT_0xF
000391 940e 0cf7 	CALL SUBOPT_0x21
000393 940e 0cd2 	CALL SUBOPT_0x1B
000395 f009      	BREQ _0x4B
                 _0x4A:
000396 c006      	RJMP _0x49
                 _0x4B:
                 ; 0000 009E         cells[x][y+1].isCleared = true;
000397 940e 0c6a 	CALL SUBOPT_0xF
000399 940e 0cf7 	CALL SUBOPT_0x21
00039b 940e 0cd8 	CALL SUBOPT_0x1C
                 ; 0000 009F     }
                 ; 0000 00A0     if(x-1 >= 0 && y-1 >=0 && adjacentBombs(x-1,y-1,cells) == '0' && cells[x-1][y-1].isBomb == false){    //left up
                 _0x49:
00039d 940e 0c30 	CALL SUBOPT_0x8
00039f f08a      	BRMI _0x4D
0003a0 940e 0c65 	CALL SUBOPT_0xE
0003a2 f072      	BRMI _0x4D
0003a3 940e 0cb7 	CALL SUBOPT_0x18
0003a5 940e 0cb7 	CALL SUBOPT_0x18
0003a7 940e 0ce9 	CALL SUBOPT_0x1F
0003a9 f439      	BRNE _0x4D
0003aa 940e 0c35 	CALL SUBOPT_0x9
0003ac 940e 0cff 	CALL SUBOPT_0x22
0003ae 940e 0cd2 	CALL SUBOPT_0x1B
0003b0 f009      	BREQ _0x4E
                 _0x4D:
0003b1 c006      	RJMP _0x4C
                 _0x4E:
                 ; 0000 00A1         cells[x-1][y-1].isCleared = true;
0003b2 940e 0c35 	CALL SUBOPT_0x9
0003b4 940e 0cff 	CALL SUBOPT_0x22
0003b6 940e 0cd8 	CALL SUBOPT_0x1C
                 ; 0000 00A2     }
                 ; 0000 00A3     if(x+1<5 && y-1 >=0 && adjacentBombs(x+1,y-1,cells) == '0' && cells[x+1][y-1].isBomb == false){    //right up
                 _0x4C:
0003b8 940e 0c55 	CALL SUBOPT_0xC
0003ba f48c      	BRGE _0x50
0003bb 940e 0c65 	CALL SUBOPT_0xE
0003bd f072      	BRMI _0x50
0003be 940e 0cde 	CALL SUBOPT_0x1D
0003c0 940e 0cb7 	CALL SUBOPT_0x18
0003c2 940e 0ce9 	CALL SUBOPT_0x1F
0003c4 f439      	BRNE _0x50
0003c5 940e 0c5a 	CALL SUBOPT_0xD
0003c7 940e 0cff 	CALL SUBOPT_0x22
0003c9 940e 0cd2 	CALL SUBOPT_0x1B
0003cb f009      	BREQ _0x51
                 _0x50:
0003cc c006      	RJMP _0x4F
                 _0x51:
                 ; 0000 00A4         cells[x+1][y-1].isCleared = true;
0003cd 940e 0c5a 	CALL SUBOPT_0xD
0003cf 940e 0cff 	CALL SUBOPT_0x22
0003d1 940e 0cd8 	CALL SUBOPT_0x1C
                 ; 0000 00A5     }
                 ; 0000 00A6     if(x-1 >= 0 && y+1 < 5 && adjacentBombs(x-1,y+1,cells) == '0' && cells[x-1][y+1].isBomb == false){     //left down
                 _0x4F:
0003d3 940e 0c30 	CALL SUBOPT_0x8
0003d5 f08a      	BRMI _0x53
0003d6 940e 0c85 	CALL SUBOPT_0x11
0003d8 f474      	BRGE _0x53
0003d9 940e 0cb7 	CALL SUBOPT_0x18
0003db 940e 0cde 	CALL SUBOPT_0x1D
0003dd 940e 0ce9 	CALL SUBOPT_0x1F
0003df f439      	BRNE _0x53
0003e0 940e 0c35 	CALL SUBOPT_0x9
0003e2 940e 0d04 	CALL SUBOPT_0x23
0003e4 940e 0cd2 	CALL SUBOPT_0x1B
0003e6 f009      	BREQ _0x54
                 _0x53:
0003e7 c006      	RJMP _0x52
                 _0x54:
                 ; 0000 00A7         cells[x-1][y+1].isCleared = true;
0003e8 940e 0c35 	CALL SUBOPT_0x9
0003ea 940e 0d04 	CALL SUBOPT_0x23
0003ec 940e 0cd8 	CALL SUBOPT_0x1C
                 ; 0000 00A8     }
                 ; 0000 00A9     if(x+1 <5 && y+1 <5 && adjacentBombs(x+1,y+1,cells) == '0' && cells[x+1][y+1].isBomb == false){     //right down
                 _0x52:
0003ee 940e 0c55 	CALL SUBOPT_0xC
0003f0 f48c      	BRGE _0x56
0003f1 940e 0c85 	CALL SUBOPT_0x11
0003f3 f474      	BRGE _0x56
0003f4 940e 0cde 	CALL SUBOPT_0x1D
0003f6 940e 0cde 	CALL SUBOPT_0x1D
0003f8 940e 0ce9 	CALL SUBOPT_0x1F
0003fa f439      	BRNE _0x56
0003fb 940e 0c5a 	CALL SUBOPT_0xD
0003fd 940e 0d04 	CALL SUBOPT_0x23
0003ff 940e 0cd2 	CALL SUBOPT_0x1B
000401 f009      	BREQ _0x57
                 _0x56:
000402 c006      	RJMP _0x55
                 _0x57:
                 ; 0000 00AA         cells[x+1][y+1].isCleared = true;
000403 940e 0c5a 	CALL SUBOPT_0xD
000405 940e 0d04 	CALL SUBOPT_0x23
000407 940e 0cd8 	CALL SUBOPT_0x1C
                 ; 0000 00AB     }
                 ; 0000 00AC }
                 _0x55:
000409 940c 0728 	JMP  _0x2100009
                 ; .FEND
                 ;//numara cate celule au fost acoperite(flaguri sau celule cu numere)
                 ;//returneaza TRUE daca jocul este castigat
                 ;//altfel returneaza FALSE
                 ;bool checkWin(int cellsFilled){
                 ; 0000 00B0 _Bool checkWin(int cellsFilled){
                 _checkWin:
                 ; .FSTART _checkWin
                 ; 0000 00B1     int i,j;
                 ; 0000 00B2     int count = 0;
                 ; 0000 00B3     for(i = 0; i < 5; i++){
00040b 93ba      	ST   -Y,R27
00040c 93aa      	ST   -Y,R26
00040d 940e 0e4e 	CALL __SAVELOCR6
                 ;	cellsFilled -> Y+6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	count -> R20,R21
                +
00040f e040     +LDI R20 , LOW ( 0 )
000410 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                +
000411 e000     +LDI R16 , LOW ( 0 )
000412 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x59:
                +
000413 3005     +CPI R16 , LOW ( 5 )
000414 e0e0     +LDI R30 , HIGH ( 5 )
000415 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000416 f4ec      	BRGE _0x5A
                 ; 0000 00B4         for(j = 0; j < 5; j++){
                +
000417 e020     +LDI R18 , LOW ( 0 )
000418 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x5C:
                +
000419 3025     +CPI R18 , LOW ( 5 )
00041a e0e0     +LDI R30 , HIGH ( 5 )
00041b 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
00041c f4a4      	BRGE _0x5D
                 ; 0000 00B5             if(cells[i][j].isCleared || cells[i][j].isFlag){
00041d 940e 0d09 	CALL SUBOPT_0x24
00041f 010f      	MOVW R0,R30
000420 01db      	MOVW R26,R22
000421 0fae      	ADD  R26,R30
000422 1fbf      	ADC  R27,R31
000423 9616      	ADIW R26,6
000424 91ec      	LD   R30,X
000425 30e0      	CPI  R30,0
000426 f429      	BRNE _0x5F
000427 01f0      	MOVW R30,R0
000428 01db      	MOVW R26,R22
000429 940e 0ca1 	CALL SUBOPT_0x15
00042b f011      	BREQ _0x5E
                 _0x5F:
                 ; 0000 00B6                 count++;
                +
00042c 5f4f     +SUBI R20 , LOW ( - 1 )
00042d 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
                 ; 0000 00B7             }
                 ; 0000 00B8         }
                 _0x5E:
                +
00042e 5f2f     +SUBI R18 , LOW ( - 1 )
00042f 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000430 cfe8      	RJMP _0x5C
                 _0x5D:
                 ; 0000 00B9     }
                +
000431 5f0f     +SUBI R16 , LOW ( - 1 )
000432 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000433 cfdf      	RJMP _0x59
                 _0x5A:
                 ; 0000 00BA     if(count == cellsFilled)
000434 81ee      	LDD  R30,Y+6
000435 81ff      	LDD  R31,Y+6+1
000436 17e4      	CP   R30,R20
000437 07f5      	CPC  R31,R21
000438 f411      	BRNE _0x61
                 ; 0000 00BB         return true;
000439 e0e1      	LDI  R30,LOW(1)
00043a c001      	RJMP _0x210000B
                 ; 0000 00BC     return false;
                 _0x61:
00043b e0e0      	LDI  R30,LOW(0)
                 _0x210000B:
00043c 940e 0e55 	CALL __LOADLOCR6
                 _0x210000C:
00043e 9628      	ADIW R28,8
00043f 9508      	RET
                 ; 0000 00BD }
                 ; .FEND
                 ;//apeleaza functiile de display
                 ;void display(int cursorPosx, int cursorPosy, struct Cell cells[5][5]){
                 ; 0000 00BF void display(int cursorPosx, int cursorPosy, struct Cell cells[5][5]){
                 _display:
                 ; .FSTART _display
                 ; 0000 00C0     displayBoard(cursorPosx, cursorPosy);
000440 93ba      	ST   -Y,R27
000441 93aa      	ST   -Y,R26
                 ;	cursorPosx -> Y+4
                 ;	cursorPosy -> Y+2
                 ;	cells -> Y+0
000442 940e 0ce4 	CALL SUBOPT_0x1E
000444 81ac      	LDD  R26,Y+4
000445 81bd      	LDD  R27,Y+4+1
000446 dda8      	RCALL _displayBoard
                 ; 0000 00C1     displayCursor(cursorPosx, cursorPosy);
000447 940e 0ce4 	CALL SUBOPT_0x1E
000449 81ac      	LDD  R26,Y+4
00044a 81bd      	LDD  R27,Y+4+1
00044b dd98      	RCALL _displayCursor
                 ; 0000 00C2     displayCellIndicator(cells);
00044c 81a8      	LD   R26,Y
00044d 81b9      	LDD  R27,Y+1
00044e deb1      	RCALL _displayCellIndicator
                 ; 0000 00C3 }
00044f 940c 0728 	JMP  _0x2100009
                 ; .FEND
                 ;//reseteaza pozitia bombelor(pentru regenerare bombe daca prima selectie a fost
                 ;//fix pe o bomba)
                 ;void resetBombs(struct Cell cells[5][5]){
                 ; 0000 00C6 void resetBombs(struct Cell cells[5][5]){
                 _resetBombs:
                 ; .FSTART _resetBombs
                 ; 0000 00C7     int i, j;
                 ; 0000 00C8     for(i=0;i<5;i++){
000451 940e 0bd3 	CALL SUBOPT_0x0
                 ;	cells -> Y+4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 _0x63:
                +
000453 3005     +CPI R16 , LOW ( 5 )
000454 e0e0     +LDI R30 , HIGH ( 5 )
000455 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
000456 f49c      	BRGE _0x64
                 ; 0000 00C9         for(j=0;j<5;j++){
                +
000457 e020     +LDI R18 , LOW ( 0 )
000458 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x66:
                +
000459 3025     +CPI R18 , LOW ( 5 )
00045a e0e0     +LDI R30 , HIGH ( 5 )
00045b 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
00045c f454      	BRGE _0x67
                 ; 0000 00CA             cells[i][j].isBomb = false;
00045d 940e 0bed 	CALL SUBOPT_0x2
00045f 0fae      	ADD  R26,R30
000460 1fbf      	ADC  R27,R31
000461 9614      	ADIW R26,4
000462 e0e0      	LDI  R30,LOW(0)
000463 93ec      	ST   X,R30
                 ; 0000 00CB         }
                +
000464 5f2f     +SUBI R18 , LOW ( - 1 )
000465 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000466 cff2      	RJMP _0x66
                 _0x67:
                 ; 0000 00CC     }
                +
000467 5f0f     +SUBI R16 , LOW ( - 1 )
000468 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000469 cfe9      	RJMP _0x63
                 _0x64:
                 ; 0000 00CD }
00046a 940e 0e57 	CALL __LOADLOCR4
00046c 940c 0728 	JMP  _0x2100009
                 ; .FEND
                 ;void main(void){
                 ; 0000 00CE void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 00CF int cursorPosx = 0;
                 ; 0000 00D0 int cursorPosy = 0;
                 ; 0000 00D1 //init display
                 ; 0000 00D2 init.font=font5x7;
                 ;	cursorPosx -> R16,R17
                 ;	cursorPosy -> R18,R19
                +
00046e e000     +LDI R16 , LOW ( 0 )
00046f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000470 e020     +LDI R18 , LOW ( 0 )
000471 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000472 e7ec      	LDI  R30,LOW(_font5x7*2)
000473 e0f0      	LDI  R31,HIGH(_font5x7*2)
000474 93e0 021d 	STS  _init,R30
000476 93f0 021e 	STS  _init+1,R31
                 ; 0000 00D3 init.temp_coef=PCD8544_DEFAULT_TEMP_COEF;
                +
000478 91e0 0223+LDS R30 , _init + ( 6 )
                 	__GETB1MN _init,6
00047a 7fec      	ANDI R30,LOW(0xFC)
                +
00047b 93e0 0223+STS _init + ( 6 ) , R30
                 	__PUTB1MN _init,6
                 ; 0000 00D4 init.bias=PCD8544_DEFAULT_BIAS;
                +
00047d 91e0 0223+LDS R30 , _init + ( 6 )
                 	__GETB1MN _init,6
00047f 7ee3      	ANDI R30,LOW(0xE3)
000480 60ec      	ORI  R30,LOW(0xC)
                +
000481 93e0 0223+STS _init + ( 6 ) , R30
                 	__PUTB1MN _init,6
                 ; 0000 00D5 init.vlcd=PCD8544_DEFAULT_VLCD;
                +
000483 91e0 0224+LDS R30 , _init + ( 7 )
                 	__GETB1MN _init,7
000485 78e0      	ANDI R30,LOW(0x80)
000486 63e2      	ORI  R30,LOW(0x32)
                +
000487 93e0 0224+STS _init + ( 7 ) , R30
                 	__PUTB1MN _init,7
                 ; 0000 00D6 /* No need for reading data from external memory */
                 ; 0000 00D7 init.readxmem=NULL;
000489 e0e0      	LDI  R30,LOW(0)
00048a e0f0      	LDI  R31,HIGH(0)
                +
00048b 93e0 021f+STS _init + ( 2 ) , R30
00048d 93f0 0220+STS _init + ( 2 ) + 1 , R31
                 	__PUTW1MN _init,2
                 ; 0000 00D8 /* No need for reading data from external memory */
                 ; 0000 00D9 init.writexmem=NULL;
                +
00048f 93e0 0221+STS _init + ( 4 ) , R30
000491 93f0 0222+STS _init + ( 4 ) + 1 , R31
                 	__PUTW1MN _init,4
                 ; 0000 00DA /* Initialize the LCD controller and graphics */
                 ; 0000 00DB glcd_init(&init);
000493 e1ad      	LDI  R26,LOW(_init)
000494 e0b2      	LDI  R27,HIGH(_init)
000495 940e 0627 	CALL _glcd_init
                 ; 0000 00DC 
                 ; 0000 00DD //initializare porturi
                 ; 0000 00DE BACKLIGHT = 0;
000497 9842      	CBI  0x8,2
                 ; 0000 00DF SELECT = 1;
000498 9a00      	SBI  0x0,0
                 ; 0000 00E0 FLAG = 1;
000499 9a01      	SBI  0x0,1
                 ; 0000 00E1 LEFT = 1;
00049a 9a02      	SBI  0x0,2
                 ; 0000 00E2 RIGHT = 1;
00049b 9a03      	SBI  0x0,3
                 ; 0000 00E3 UP = 1;
00049c 9a04      	SBI  0x0,4
                 ; 0000 00E4 DOWN = 1;
00049d 9a05      	SBI  0x0,5
                 ; 0000 00E5 
                 ; 0000 00E6 flagIndex = 0;
00049e 2455      	CLR  R5
00049f 2466      	CLR  R6
                 ; 0000 00E7 initializeCells(cells);
0004a0 e2a5      	LDI  R26,LOW(_cells)
0004a1 e0b2      	LDI  R27,HIGH(_cells)
0004a2 dcd7      	RCALL _initializeCells
                 ; 0000 00E8 displayBoard(0,0);
0004a3 940e 0d18 	CALL SUBOPT_0x25
0004a5 dd49      	RCALL _displayBoard
                 ; 0000 00E9 displayCursor(0,0);
0004a6 940e 0d18 	CALL SUBOPT_0x25
0004a8 dd3b      	RCALL _displayCursor
                 ; 0000 00EA generateBombs(cells);
0004a9 940e 0d1f 	CALL SUBOPT_0x26
                 ; 0000 00EB displayCellIndicator(cells);
0004ab e2a5      	LDI  R26,LOW(_cells)
0004ac e0b2      	LDI  R27,HIGH(_cells)
0004ad de52      	RCALL _displayCellIndicator
                 ; 0000 00EC     while (1)
                 _0x76:
                 ; 0000 00ED     {
                 ; 0000 00EE     //SELECT
                 ; 0000 00EF         if(SELECT == 0){
0004ae 9900      	SBIC 0x0,0
0004af c07c      	RJMP _0x79
                 ; 0000 00F0                 delay_ms(30);
0004b0 940e 0d23 	CALL SUBOPT_0x27
                 ; 0000 00F1                 if(SELECT == 0){
0004b2 9900      	SBIC 0x0,0
0004b3 c078      	RJMP _0x7A
                 ; 0000 00F2                     while(SELECT == 0){
                 _0x7B:
0004b4 9900      	SBIC 0x0,0
0004b5 c002      	RJMP _0x7D
                 ; 0000 00F3                         wdogtrig();
0004b6 95a8      	wdr
                 ; 0000 00F4                     }
0004b7 cffc      	RJMP _0x7B
                 _0x7D:
                 ; 0000 00F5                     if(inPlay){
0004b8 20aa      	TST  R10
0004b9 f409      	BRNE PC+2
0004ba c05e      	RJMP _0x7E
                 ; 0000 00F6                         //daca prima selectie este pe o celula cu bomba se sterg bombele si se genereaza altele
                 ; 0000 00F7                         if(firstMove == true && cells[cursorPosx][cursorPosy].isBomb == true){;
0004bb e0e1      	LDI  R30,LOW(1)
0004bc 15e9      	CP   R30,R9
0004bd f449      	BRNE _0x80
0004be 940e 0d09 	CALL SUBOPT_0x24
0004c0 01db      	MOVW R26,R22
0004c1 0fae      	ADD  R26,R30
0004c2 1fbf      	ADC  R27,R31
0004c3 9614      	ADIW R26,4
0004c4 91ac      	LD   R26,X
0004c5 30a1      	CPI  R26,LOW(0x1)
0004c6 f009      	BREQ _0x81
                 _0x80:
0004c7 c011      	RJMP _0x7F
                 _0x81:
                 ; 0000 00F8                             resetBombs(cells);
0004c8 e2a5      	LDI  R26,LOW(_cells)
0004c9 e0b2      	LDI  R27,HIGH(_cells)
0004ca df86      	RCALL _resetBombs
                 ; 0000 00F9                             generateBombs(cells);
0004cb 940e 0d1f 	CALL SUBOPT_0x26
                 ; 0000 00FA                             glcd_clear();
0004cd 940e 06ad 	CALL _glcd_clear
                 ; 0000 00FB                             cells[cursorPosx][cursorPosy].isCleared = true;
0004cf 940e 0d09 	CALL SUBOPT_0x24
0004d1 01db      	MOVW R26,R22
0004d2 940e 0cd8 	CALL SUBOPT_0x1C
                 ; 0000 00FC                             display(cursorPosx, cursorPosy, cells);
0004d4 940e 0cb2 	CALL SUBOPT_0x17
0004d6 940e 0d27 	CALL SUBOPT_0x28
                 ; 0000 00FD                         }
                 ; 0000 00FE                         //daca se selecteaza bomba si nu este prima selectie
                 ; 0000 00FF                         //LOSE
                 ; 0000 0100                         else if(cells[cursorPosx][cursorPosy].isBomb){
0004d8 c03e      	RJMP _0x82
                 _0x7F:
0004d9 940e 0d09 	CALL SUBOPT_0x24
0004db 01db      	MOVW R26,R22
0004dc 0fae      	ADD  R26,R30
0004dd 1fbf      	ADC  R27,R31
0004de 9614      	ADIW R26,4
0004df 91ec      	LD   R30,X
0004e0 30e0      	CPI  R30,0
0004e1 f091      	BREQ _0x83
                 ; 0000 0101                             if(cells[cursorPosx][cursorPosy].isFlag == false){
0004e2 940e 0d09 	CALL SUBOPT_0x24
0004e4 01db      	MOVW R26,R22
0004e5 940e 0ca1 	CALL SUBOPT_0x15
0004e7 f459      	BRNE _0x84
                 ; 0000 0102                                 glcd_clear();
0004e8 940e 06ad 	CALL _glcd_clear
                 ; 0000 0103                                 glcd_outtextxyf(0,20,gameOverText);
0004ea e0e0      	LDI  R30,LOW(0)
0004eb 93ea      	ST   -Y,R30
0004ec e1e4      	LDI  R30,LOW(20)
0004ed 93ea      	ST   -Y,R30
0004ee e6a0      	LDI  R26,LOW(_gameOverText*2)
0004ef e0b2      	LDI  R27,HIGH(_gameOverText*2)
0004f0 940e 0a20 	CALL _glcd_outtextxyf
                 ; 0000 0104                                 inPlay = false;
0004f2 24aa      	CLR  R10
                 ; 0000 0105                                 }
                 ; 0000 0106                         }
                 _0x84:
                 ; 0000 0107                         //celula selectat nu are bomba sau flag
                 ; 0000 0108                         //verificare conditie de WIN
                 ; 0000 0109                         else if(cells[cursorPosx][cursorPosy].isFlag == false){
0004f3 c023      	RJMP _0x85
                 _0x83:
0004f4 940e 0d09 	CALL SUBOPT_0x24
0004f6 01db      	MOVW R26,R22
0004f7 940e 0ca1 	CALL SUBOPT_0x15
0004f9 f4e9      	BRNE _0x86
                 ; 0000 010A                             cells[cursorPosx][cursorPosy].isCleared = true;
0004fa 940e 0d09 	CALL SUBOPT_0x24
0004fc 01db      	MOVW R26,R22
0004fd 940e 0cd8 	CALL SUBOPT_0x1C
                 ; 0000 010B                             adjacentClearCells(cursorPosx, cursorPosy, cells);
0004ff 940e 0cb2 	CALL SUBOPT_0x17
000501 e2a5      	LDI  R26,LOW(_cells)
000502 e0b2      	LDI  R27,HIGH(_cells)
000503 de3b      	RCALL _adjacentClearCells
                 ; 0000 010C                             displayCellIndicator(cells);
000504 e2a5      	LDI  R26,LOW(_cells)
000505 e0b2      	LDI  R27,HIGH(_cells)
000506 ddf9      	RCALL _displayCellIndicator
                 ; 0000 010D                             if(checkWin(cellNumber) == true){
000507 e1a9      	LDI  R26,LOW(25)
000508 e0b0      	LDI  R27,HIGH(25)
000509 df01      	RCALL _checkWin
00050a 30e1      	CPI  R30,LOW(0x1)
00050b f459      	BRNE _0x87
                 ; 0000 010E                                 inPlay = false;
00050c 24aa      	CLR  R10
                 ; 0000 010F                                 glcd_clear();
00050d 940e 06ad 	CALL _glcd_clear
                 ; 0000 0110                                 glcd_outtextxyf(0,10,gameWonText);
00050f e0e0      	LDI  R30,LOW(0)
000510 93ea      	ST   -Y,R30
000511 e0ea      	LDI  R30,LOW(10)
000512 93ea      	ST   -Y,R30
000513 e6a6      	LDI  R26,LOW(_gameWonText*2)
000514 e0b2      	LDI  R27,HIGH(_gameWonText*2)
000515 940e 0a20 	CALL _glcd_outtextxyf
                 ; 0000 0111                             }
                 ; 0000 0112                         }
                 _0x87:
                 ; 0000 0113                         firstMove = false;
                 _0x86:
                 _0x85:
                 _0x82:
000517 2499      	CLR  R9
                 ; 0000 0114                     }
                 ; 0000 0115                     //resetare joc
                 ; 0000 0116                     else{
000518 c013      	RJMP _0x88
                 _0x7E:
                 ; 0000 0117                         glcd_clear();
000519 940e 06ad 	CALL _glcd_clear
                 ; 0000 0118                         initializeCells(cells);
00051b e2a5      	LDI  R26,LOW(_cells)
00051c e0b2      	LDI  R27,HIGH(_cells)
00051d dc5c      	RCALL _initializeCells
                 ; 0000 0119                         generateBombs(cells);
00051e 940e 0d1f 	CALL SUBOPT_0x26
                 ; 0000 011A                         cursorPosx = 0;
                +
000520 e000     +LDI R16 , LOW ( 0 )
000521 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 011B                         cursorPosy = 0;
                +
000522 e020     +LDI R18 , LOW ( 0 )
000523 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 011C                         flagIndex = 0;
000524 2455      	CLR  R5
000525 2466      	CLR  R6
                 ; 0000 011D                         inPlay = true;
000526 e0e1      	LDI  R30,LOW(1)
000527 2eae      	MOV  R10,R30
                 ; 0000 011E                         display(cursorPosx, cursorPosy, cells);
000528 940e 0cb2 	CALL SUBOPT_0x17
00052a 940e 0d27 	CALL SUBOPT_0x28
                 ; 0000 011F                     }
                 _0x88:
                 ; 0000 0120                 }
                 ; 0000 0121 
                 ; 0000 0122      }
                 _0x7A:
                 ; 0000 0123      //FLAG
                 ; 0000 0124         if(FLAG == 0){
                 _0x79:
00052c 9901      	SBIC 0x0,1
00052d c036      	RJMP _0x89
                 ; 0000 0125                 delay_ms(30);
00052e 940e 0d23 	CALL SUBOPT_0x27
                 ; 0000 0126                 if(FLAG == 0){
000530 9901      	SBIC 0x0,1
000531 c032      	RJMP _0x8A
                 ; 0000 0127                     while(FLAG == 0){
                 _0x8B:
000532 9901      	SBIC 0x0,1
000533 c002      	RJMP _0x8D
                 ; 0000 0128                         wdogtrig();
000534 95a8      	wdr
                 ; 0000 0129                     }
000535 cffc      	RJMP _0x8B
                 _0x8D:
                 ; 0000 012A                     if(inPlay == true){
000536 e0e1      	LDI  R30,LOW(1)
000537 15ea      	CP   R30,R10
000538 f551      	BRNE _0x8E
                 ; 0000 012B                         //remove flag
                 ; 0000 012C                         if(cells[cursorPosx][cursorPosy].isFlag){
000539 940e 0d09 	CALL SUBOPT_0x24
00053b 01db      	MOVW R26,R22
00053c 940e 0ca1 	CALL SUBOPT_0x15
00053e f071      	BREQ _0x8F
                 ; 0000 012D                             cells[cursorPosx][cursorPosy].isFlag = false;
00053f 940e 0d09 	CALL SUBOPT_0x24
000541 01db      	MOVW R26,R22
000542 0fae      	ADD  R26,R30
000543 1fbf      	ADC  R27,R31
000544 9615      	ADIW R26,5
000545 e0e0      	LDI  R30,LOW(0)
000546 93ec      	ST   X,R30
                 ; 0000 012E                             flagIndex--;
                +
000547 2de5     +MOV R30 , R5
000548 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
000549 9731      	SBIW R30,1
                +
00054a 2e5e     +MOV R5 , R30
00054b 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 012F                         }
                 ; 0000 0130                         //set flag
                 ; 0000 0131                         else{
00054c c011      	RJMP _0x90
                 _0x8F:
                 ; 0000 0132                             if(flagIndex <= flagNumber){
00054d e0e5      	LDI  R30,LOW(5)
00054e e0f0      	LDI  R31,HIGH(5)
00054f 15e5      	CP   R30,R5
000550 05f6      	CPC  R31,R6
000551 f064      	BRLT _0x91
                 ; 0000 0133                                 cells[cursorPosx][cursorPosy].isFlag = true;
000552 940e 0d09 	CALL SUBOPT_0x24
000554 01db      	MOVW R26,R22
000555 0fae      	ADD  R26,R30
000556 1fbf      	ADC  R27,R31
000557 9615      	ADIW R26,5
000558 e0e1      	LDI  R30,LOW(1)
000559 93ec      	ST   X,R30
                 ; 0000 0134                                 flagIndex++;
00055a e0e1      	LDI  R30,LOW(1)
00055b e0f0      	LDI  R31,HIGH(1)
                +
00055c 0e5e     +ADD R5 , R30
00055d 1e6f     +ADC R6 , R31
                 	__ADDWRR 5,6,30,31
                 ; 0000 0135                             }
                 ; 0000 0136                         }
                 _0x91:
                 _0x90:
                 ; 0000 0137                         glcd_clear();
00055e 940e 0d2b 	CALL SUBOPT_0x29
                 ; 0000 0138                         display(cursorPosx, cursorPosy, cells);
000560 940e 0d27 	CALL SUBOPT_0x28
                 ; 0000 0139                     }
                 ; 0000 013A                     else{
000562 c001      	RJMP _0x92
                 _0x8E:
                 ; 0000 013B                         glcd_clear();
000563 d149      	RCALL _glcd_clear
                 ; 0000 013C                     }
                 _0x92:
                 ; 0000 013D                 }
                 ; 0000 013E         }
                 _0x8A:
                 ; 0000 013F     //MOVEMENT    //2-left, 3-right, 4-up, 5-down
                 ; 0000 0140         if(LEFT == 0){
                 _0x89:
000564 9902      	SBIC 0x0,2
000565 c017      	RJMP _0x93
                 ; 0000 0141                 delay_ms(30);
000566 940e 0d23 	CALL SUBOPT_0x27
                 ; 0000 0142                 if(LEFT == 0){
000568 9902      	SBIC 0x0,2
000569 c013      	RJMP _0x94
                 ; 0000 0143                     while(LEFT == 0){
                 _0x95:
00056a 9902      	SBIC 0x0,2
00056b c002      	RJMP _0x97
                 ; 0000 0144                         wdogtrig();
00056c 95a8      	wdr
                 ; 0000 0145                     }
00056d cffc      	RJMP _0x95
                 _0x97:
                 ; 0000 0146                     if(inPlay == true){
00056e e0e1      	LDI  R30,LOW(1)
00056f 15ea      	CP   R30,R10
000570 f459      	BRNE _0x98
                 ; 0000 0147                         if(cursorPosx > 0){
000571 2400      	CLR  R0
000572 1600      	CP   R0,R16
000573 0601      	CPC  R0,R17
000574 f434      	BRGE _0x99
                 ; 0000 0148                             cursorPosx--;
                +
000575 5001     +SUBI R16 , LOW ( 1 )
000576 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 0149                             glcd_clear();
000577 940e 0d2b 	CALL SUBOPT_0x29
                 ; 0000 014A                             display(cursorPosx, cursorPosy, cells);
000579 940e 0d27 	CALL SUBOPT_0x28
                 ; 0000 014B                         }
                 ; 0000 014C                     }
                 _0x99:
                 ; 0000 014D                     else{
00057b c001      	RJMP _0x9A
                 _0x98:
                 ; 0000 014E                         glcd_clear();
00057c d130      	RCALL _glcd_clear
                 ; 0000 014F                     }
                 _0x9A:
                 ; 0000 0150                 }
                 ; 0000 0151         }
                 _0x94:
                 ; 0000 0152         if(RIGHT == 0){
                 _0x93:
00057d 9903      	SBIC 0x0,3
00057e c017      	RJMP _0x9B
                 ; 0000 0153                 delay_ms(30);
00057f 940e 0d23 	CALL SUBOPT_0x27
                 ; 0000 0154                 if(RIGHT == 0){
000581 9903      	SBIC 0x0,3
000582 c013      	RJMP _0x9C
                 ; 0000 0155                     while(RIGHT == 0){
                 _0x9D:
000583 9903      	SBIC 0x0,3
000584 c002      	RJMP _0x9F
                 ; 0000 0156                         wdogtrig();
000585 95a8      	wdr
                 ; 0000 0157                     }
000586 cffc      	RJMP _0x9D
                 _0x9F:
                 ; 0000 0158                     if(inPlay == true){
000587 e0e1      	LDI  R30,LOW(1)
000588 15ea      	CP   R30,R10
000589 f459      	BRNE _0xA0
                 ; 0000 0159                         if(cursorPosx < 4){
                +
00058a 3004     +CPI R16 , LOW ( 4 )
00058b e0e0     +LDI R30 , HIGH ( 4 )
00058c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
00058d f434      	BRGE _0xA1
                 ; 0000 015A                             cursorPosx++;
                +
00058e 5f0f     +SUBI R16 , LOW ( - 1 )
00058f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 015B                             glcd_clear();
000590 940e 0d2b 	CALL SUBOPT_0x29
                 ; 0000 015C                             display(cursorPosx, cursorPosy, cells);
000592 940e 0d27 	CALL SUBOPT_0x28
                 ; 0000 015D                         }
                 ; 0000 015E                     }
                 _0xA1:
                 ; 0000 015F                     else{
000594 c001      	RJMP _0xA2
                 _0xA0:
                 ; 0000 0160                         glcd_clear();
000595 d117      	RCALL _glcd_clear
                 ; 0000 0161                     }
                 _0xA2:
                 ; 0000 0162                 }
                 ; 0000 0163         }
                 _0x9C:
                 ; 0000 0164         if(UP == 0){
                 _0x9B:
000596 9904      	SBIC 0x0,4
000597 c017      	RJMP _0xA3
                 ; 0000 0165                 delay_ms(30);
000598 940e 0d23 	CALL SUBOPT_0x27
                 ; 0000 0166                 if(UP == 0){
00059a 9904      	SBIC 0x0,4
00059b c013      	RJMP _0xA4
                 ; 0000 0167                     while(UP == 0){
                 _0xA5:
00059c 9904      	SBIC 0x0,4
00059d c002      	RJMP _0xA7
                 ; 0000 0168                         wdogtrig();
00059e 95a8      	wdr
                 ; 0000 0169                     }
00059f cffc      	RJMP _0xA5
                 _0xA7:
                 ; 0000 016A                     if(inPlay == true){
0005a0 e0e1      	LDI  R30,LOW(1)
0005a1 15ea      	CP   R30,R10
0005a2 f459      	BRNE _0xA8
                 ; 0000 016B                         if(cursorPosy > 0){
0005a3 2400      	CLR  R0
0005a4 1602      	CP   R0,R18
0005a5 0603      	CPC  R0,R19
0005a6 f434      	BRGE _0xA9
                 ; 0000 016C                             cursorPosy--;
                +
0005a7 5021     +SUBI R18 , LOW ( 1 )
0005a8 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 016D                             glcd_clear();
0005a9 940e 0d2b 	CALL SUBOPT_0x29
                 ; 0000 016E                             display(cursorPosx, cursorPosy, cells);
0005ab 940e 0d27 	CALL SUBOPT_0x28
                 ; 0000 016F                         }
                 ; 0000 0170                     }
                 _0xA9:
                 ; 0000 0171                     else{
0005ad c001      	RJMP _0xAA
                 _0xA8:
                 ; 0000 0172                         glcd_clear();
0005ae d0fe      	RCALL _glcd_clear
                 ; 0000 0173                     }
                 _0xAA:
                 ; 0000 0174                 }
                 ; 0000 0175         }
                 _0xA4:
                 ; 0000 0176         if(DOWN == 0){
                 _0xA3:
0005af 9905      	SBIC 0x0,5
0005b0 c017      	RJMP _0xAB
                 ; 0000 0177                 delay_ms(30);
0005b1 940e 0d23 	CALL SUBOPT_0x27
                 ; 0000 0178                 if(DOWN == 0){
0005b3 9905      	SBIC 0x0,5
0005b4 c013      	RJMP _0xAC
                 ; 0000 0179                     while(DOWN == 0){
                 _0xAD:
0005b5 9905      	SBIC 0x0,5
0005b6 c002      	RJMP _0xAF
                 ; 0000 017A                         wdogtrig();
0005b7 95a8      	wdr
                 ; 0000 017B                     }
0005b8 cffc      	RJMP _0xAD
                 _0xAF:
                 ; 0000 017C                     if(inPlay == true){
0005b9 e0e1      	LDI  R30,LOW(1)
0005ba 15ea      	CP   R30,R10
0005bb f459      	BRNE _0xB0
                 ; 0000 017D                         if(cursorPosy < 4){
                +
0005bc 3024     +CPI R18 , LOW ( 4 )
0005bd e0e0     +LDI R30 , HIGH ( 4 )
0005be 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
0005bf f434      	BRGE _0xB1
                 ; 0000 017E                             cursorPosy++;
                +
0005c0 5f2f     +SUBI R18 , LOW ( - 1 )
0005c1 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0000 017F                             glcd_clear();
0005c2 940e 0d2b 	CALL SUBOPT_0x29
                 ; 0000 0180                             display(cursorPosx, cursorPosy, cells);
0005c4 940e 0d27 	CALL SUBOPT_0x28
                 ; 0000 0181                         }
                 ; 0000 0182                     }
                 _0xB1:
                 ; 0000 0183                     else{
0005c6 c001      	RJMP _0xB2
                 _0xB0:
                 ; 0000 0184                         glcd_clear();
0005c7 d0e5      	RCALL _glcd_clear
                 ; 0000 0185                     }
                 _0xB2:
                 ; 0000 0186                 }
                 ; 0000 0187         }
                 _0xAC:
                 ; 0000 0188     }
                 _0xAB:
0005c8 cee5      	RJMP _0x76
                 ; 0000 0189 }
                 _0xB3:
0005c9 cfff      	RJMP _0xB3
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _pcd8544_delay_G100:
                 ; .FSTART _pcd8544_delay_G100
0005ca 9508      	RET
                 ; .FEND
                 _pcd8544_wrbus_G100:
                 ; .FSTART _pcd8544_wrbus_G100
0005cb 93aa      	ST   -Y,R26
0005cc 931a      	ST   -Y,R17
0005cd 9846      	CBI  0x8,6
0005ce e018      	LDI  R17,LOW(8)
                 _0x2000004:
0005cf dffa      	RCALL _pcd8544_delay_G100
0005d0 81e9      	LDD  R30,Y+1
0005d1 78e0      	ANDI R30,LOW(0x80)
0005d2 f011      	BREQ _0x2000006
0005d3 9a44      	SBI  0x8,4
0005d4 c001      	RJMP _0x2000007
                 _0x2000006:
0005d5 9844      	CBI  0x8,4
                 _0x2000007:
0005d6 81e9      	LDD  R30,Y+1
0005d7 0fee      	LSL  R30
0005d8 83e9      	STD  Y+1,R30
0005d9 dff0      	RCALL _pcd8544_delay_G100
0005da 9a43      	SBI  0x8,3
0005db dfee      	RCALL _pcd8544_delay_G100
0005dc 9843      	CBI  0x8,3
0005dd 5011      	SUBI R17,LOW(1)
0005de f781      	BRNE _0x2000004
0005df 9a46      	SBI  0x8,6
0005e0 8118      	LDD  R17,Y+0
0005e1 940c 0b6b 	JMP  _0x2100003
                 ; .FEND
                 _pcd8544_wrcmd:
                 ; .FSTART _pcd8544_wrcmd
0005e3 93aa      	ST   -Y,R26
0005e4 9845      	CBI  0x8,5
0005e5 81a8      	LD   R26,Y
0005e6 dfe4      	RCALL _pcd8544_wrbus_G100
0005e7 c0c3      	RJMP _0x210000A
                 ; .FEND
                 _pcd8544_wrdata_G100:
                 ; .FSTART _pcd8544_wrdata_G100
0005e8 93aa      	ST   -Y,R26
0005e9 9a45      	SBI  0x8,5
0005ea 81a8      	LD   R26,Y
0005eb dfdf      	RCALL _pcd8544_wrbus_G100
0005ec c0be      	RJMP _0x210000A
                 ; .FEND
                 _pcd8544_setaddr_G100:
                 ; .FSTART _pcd8544_setaddr_G100
0005ed 93aa      	ST   -Y,R26
0005ee 931a      	ST   -Y,R17
0005ef 81e9      	LDD  R30,Y+1
0005f0 95e6      	LSR  R30
0005f1 95e6      	LSR  R30
0005f2 95e6      	LSR  R30
0005f3 2f1e      	MOV  R17,R30
0005f4 e5e4      	LDI  R30,LOW(84)
0005f5 9fe1      	MUL  R30,R17
0005f6 01f0      	MOVW R30,R0
0005f7 01df      	MOVW R26,R30
0005f8 81ea      	LDD  R30,Y+2
0005f9 e0f0      	LDI  R31,0
0005fa 0fea      	ADD  R30,R26
0005fb 1ffb      	ADC  R31,R27
0005fc 93e0 02d4 	STS  _gfx_addr_G100,R30
0005fe 93f0 02d5 	STS  _gfx_addr_G100+1,R31
000600 2fe1      	MOV  R30,R17
000601 8118      	LDD  R17,Y+0
000602 940c 0bb2 	JMP  _0x2100002
                 ; .FEND
                 _pcd8544_gotoxy:
                 ; .FSTART _pcd8544_gotoxy
000604 93aa      	ST   -Y,R26
000605 81e9      	LDD  R30,Y+1
000606 68e0      	ORI  R30,0x80
000607 2fae      	MOV  R26,R30
000608 dfda      	RCALL _pcd8544_wrcmd
000609 81e9      	LDD  R30,Y+1
00060a 93ea      	ST   -Y,R30
00060b 81a9      	LDD  R26,Y+1
00060c dfe0      	RCALL _pcd8544_setaddr_G100
00060d 64e0      	ORI  R30,0x40
00060e 2fae      	MOV  R26,R30
00060f dfd3      	RCALL _pcd8544_wrcmd
000610 940c 0b6b 	JMP  _0x2100003
                 ; .FEND
                 _pcd8544_rdbyte:
                 ; .FSTART _pcd8544_rdbyte
000612 93aa      	ST   -Y,R26
000613 81e9      	LDD  R30,Y+1
000614 93ea      	ST   -Y,R30
000615 81a9      	LDD  R26,Y+1
000616 dfed      	RCALL _pcd8544_gotoxy
000617 91e0 02d4 	LDS  R30,_gfx_addr_G100
000619 91f0 02d5 	LDS  R31,_gfx_addr_G100+1
00061b 52ea      	SUBI R30,LOW(-_gfx_buffer_G100)
00061c 4ffd      	SBCI R31,HIGH(-_gfx_buffer_G100)
00061d 81e0      	LD   R30,Z
00061e 940c 0b6b 	JMP  _0x2100003
                 ; .FEND
                 _pcd8544_wrbyte:
                 ; .FSTART _pcd8544_wrbyte
000620 93aa      	ST   -Y,R26
000621 940e 0d2e 	CALL SUBOPT_0x2A
000623 81a8      	LD   R26,Y
000624 83a0      	STD  Z+0,R26
000625 dfc2      	RCALL _pcd8544_wrdata_G100
000626 c084      	RJMP _0x210000A
                 ; .FEND
                 _glcd_init:
                 ; .FSTART _glcd_init
000627 93ba      	ST   -Y,R27
000628 93aa      	ST   -Y,R26
000629 940e 0e50 	CALL __SAVELOCR4
00062b 9a3e      	SBI  0x7,6
00062c 9a46      	SBI  0x8,6
00062d 9a3b      	SBI  0x7,3
00062e 9843      	CBI  0x8,3
00062f 9a3c      	SBI  0x7,4
000630 9a3d      	SBI  0x7,5
000631 9a3f      	SBI  0x7,7
000632 9847      	CBI  0x8,7
000633 e0aa      	LDI  R26,LOW(10)
000634 e0b0      	LDI  R27,0
000635 940e 0dbe 	CALL _delay_ms
000637 9a47      	SBI  0x8,7
000638 81ec      	LDD  R30,Y+4
000639 81fd      	LDD  R31,Y+4+1
00063a 9730      	SBIW R30,0
00063b f121      	BREQ _0x2000008
00063c 81e6      	LDD  R30,Z+6
00063d 70e3      	ANDI R30,LOW(0x3)
00063e 2f1e      	MOV  R17,R30
00063f 81ec      	LDD  R30,Y+4
000640 81fd      	LDD  R31,Y+4+1
000641 81e6      	LDD  R30,Z+6
000642 95e6      	LSR  R30
000643 95e6      	LSR  R30
000644 70e7      	ANDI R30,LOW(0x7)
000645 2f0e      	MOV  R16,R30
000646 81ec      	LDD  R30,Y+4
000647 81fd      	LDD  R31,Y+4+1
000648 81e7      	LDD  R30,Z+7
000649 77ef      	ANDI R30,0x7F
00064a 2f3e      	MOV  R19,R30
00064b 81ac      	LDD  R26,Y+4
00064c 81bd      	LDD  R27,Y+4+1
00064d 940e 0e29 	CALL __GETW1P
                +
00064f 93e0 0204+STS _glcd_state + ( 4 ) , R30
000651 93f0 0205+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
000653 9612      	ADIW R26,2
000654 940e 0e29 	CALL __GETW1P
                +
000656 93e0 0219+STS _glcd_state + ( 25 ) , R30
000658 93f0 021a+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
00065a 81ac      	LDD  R26,Y+4
00065b 81bd      	LDD  R27,Y+4+1
00065c 9614      	ADIW R26,4
00065d 940e 0e29 	CALL __GETW1P
00065f c00d      	RJMP _0x20000A0
                 _0x2000008:
000660 e010      	LDI  R17,LOW(0)
000661 e003      	LDI  R16,LOW(3)
000662 e332      	LDI  R19,LOW(50)
000663 e0e0      	LDI  R30,LOW(0)
000664 e0f0      	LDI  R31,HIGH(0)
                +
000665 93e0 0204+STS _glcd_state + ( 4 ) , R30
000667 93f0 0205+STS _glcd_state + ( 4 ) + 1 , R31
                 	__PUTW1MN _glcd_state,4
                +
000669 93e0 0219+STS _glcd_state + ( 25 ) , R30
00066b 93f0 021a+STS _glcd_state + ( 25 ) + 1 , R31
                 	__PUTW1MN _glcd_state,25
                 _0x20000A0:
                +
00066d 93e0 021b+STS _glcd_state + ( 27 ) , R30
00066f 93f0 021c+STS _glcd_state + ( 27 ) + 1 , R31
                 	__PUTW1MN _glcd_state,27
000671 e2a1      	LDI  R26,LOW(33)
000672 df70      	RCALL _pcd8544_wrcmd
000673 2fe1      	MOV  R30,R17
000674 60e4      	ORI  R30,4
000675 2fae      	MOV  R26,R30
000676 df6c      	RCALL _pcd8544_wrcmd
000677 2fe0      	MOV  R30,R16
000678 61e0      	ORI  R30,0x10
000679 2fae      	MOV  R26,R30
00067a df68      	RCALL _pcd8544_wrcmd
00067b 2fe3      	MOV  R30,R19
00067c 68e0      	ORI  R30,0x80
00067d 2fae      	MOV  R26,R30
00067e df64      	RCALL _pcd8544_wrcmd
00067f e2a0      	LDI  R26,LOW(32)
000680 df62      	RCALL _pcd8544_wrcmd
000681 e0a1      	LDI  R26,LOW(1)
000682 d01f      	RCALL _glcd_display
000683 e0e1      	LDI  R30,LOW(1)
000684 93e0 0200 	STS  _glcd_state,R30
000686 e0e0      	LDI  R30,LOW(0)
                +
000687 93e0 0201+STS _glcd_state + ( 1 ) , R30
                 	__PUTB1MN _glcd_state,1
000689 e0e1      	LDI  R30,LOW(1)
                +
00068a 93e0 0206+STS _glcd_state + ( 6 ) , R30
                 	__PUTB1MN _glcd_state,6
                +
00068c 93e0 0207+STS _glcd_state + ( 7 ) , R30
                 	__PUTB1MN _glcd_state,7
00068e 940e 0c0a 	CALL SUBOPT_0x5
000690 e0e1      	LDI  R30,LOW(1)
                +
000691 93e0 0210+STS _glcd_state + ( 16 ) , R30
                 	__PUTB1MN _glcd_state,16
                +
000693 e1e1     +LDI R30 , LOW ( _glcd_state + ( 17 ) )
000694 e0f2     +LDI R31 , HIGH ( _glcd_state + ( 17 ) )
                 	__POINTW1MN _glcd_state,17
000695 93fa      	ST   -Y,R31
000696 93ea      	ST   -Y,R30
000697 efef      	LDI  R30,LOW(255)
000698 93ea      	ST   -Y,R30
000699 e0a8      	LDI  R26,LOW(8)
00069a e0b0      	LDI  R27,0
00069b 940e 0b52 	CALL _memset
00069d d00f      	RCALL _glcd_clear
00069e e0e1      	LDI  R30,LOW(1)
00069f 940e 0e57 	CALL __LOADLOCR4
0006a1 c086      	RJMP _0x2100009
                 ; .FEND
                 _glcd_display:
                 ; .FSTART _glcd_display
0006a2 93aa      	ST   -Y,R26
0006a3 81e8      	LD   R30,Y
0006a4 30e0      	CPI  R30,0
0006a5 f011      	BREQ _0x200000A
0006a6 e0ec      	LDI  R30,LOW(12)
0006a7 c001      	RJMP _0x200000B
                 _0x200000A:
0006a8 e0e8      	LDI  R30,LOW(8)
                 _0x200000B:
0006a9 2fae      	MOV  R26,R30
0006aa df38      	RCALL _pcd8544_wrcmd
                 _0x210000A:
0006ab 9621      	ADIW R28,1
0006ac 9508      	RET
                 ; .FEND
                 _glcd_clear:
                 ; .FSTART _glcd_clear
0006ad 940e 0e50 	CALL __SAVELOCR4
0006af e030      	LDI  R19,0
                +
0006b0 91e0 0201+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
0006b2 30e0      	CPI  R30,0
0006b3 f009      	BREQ _0x200000D
0006b4 ef3f      	LDI  R19,LOW(255)
                 _0x200000D:
0006b5 e0e0      	LDI  R30,LOW(0)
0006b6 93ea      	ST   -Y,R30
0006b7 e0a0      	LDI  R26,LOW(0)
0006b8 df4b      	RCALL _pcd8544_gotoxy
                +
0006b9 ef08     +LDI R16 , LOW ( 504 )
0006ba e011     +LDI R17 , HIGH ( 504 )
                 	__GETWRN 16,17,504
                 _0x200000E:
0006bb 01f8      	MOVW R30,R16
                +
0006bc 5001     +SUBI R16 , LOW ( 1 )
0006bd 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0006be 9730      	SBIW R30,0
0006bf f019      	BREQ _0x2000010
0006c0 2fa3      	MOV  R26,R19
0006c1 df5e      	RCALL _pcd8544_wrbyte
0006c2 cff8      	RJMP _0x200000E
                 _0x2000010:
0006c3 e0e0      	LDI  R30,LOW(0)
0006c4 93ea      	ST   -Y,R30
0006c5 e0a0      	LDI  R26,LOW(0)
0006c6 d389      	RCALL _glcd_moveto
0006c7 940e 0e57 	CALL __LOADLOCR4
0006c9 940c 0bd1 	JMP  _0x2100001
                 ; .FEND
                 _glcd_putpixel:
                 ; .FSTART _glcd_putpixel
0006cb 93aa      	ST   -Y,R26
0006cc 931a      	ST   -Y,R17
0006cd 930a      	ST   -Y,R16
0006ce 81ac      	LDD  R26,Y+4
0006cf 35a4      	CPI  R26,LOW(0x54)
0006d0 f418      	BRSH _0x2000012
0006d1 81ab      	LDD  R26,Y+3
0006d2 33a0      	CPI  R26,LOW(0x30)
0006d3 f020      	BRLO _0x2000011
                 _0x2000012:
0006d4 8119      	LDD  R17,Y+1
0006d5 8108      	LDD  R16,Y+0
0006d6 940c 0b60 	JMP  _0x2100004
                 _0x2000011:
0006d8 81ec      	LDD  R30,Y+4
0006d9 93ea      	ST   -Y,R30
0006da 81ac      	LDD  R26,Y+4
0006db df36      	RCALL _pcd8544_rdbyte
0006dc 2f1e      	MOV  R17,R30
0006dd 81eb      	LDD  R30,Y+3
0006de 70e7      	ANDI R30,LOW(0x7)
0006df e0a1      	LDI  R26,LOW(1)
0006e0 940e 0dcc 	CALL __LSLB12
0006e2 2f0e      	MOV  R16,R30
0006e3 81ea      	LDD  R30,Y+2
0006e4 30e0      	CPI  R30,0
0006e5 f011      	BREQ _0x2000014
0006e6 2b10      	OR   R17,R16
0006e7 c003      	RJMP _0x2000015
                 _0x2000014:
0006e8 2fe0      	MOV  R30,R16
0006e9 95e0      	COM  R30
0006ea 231e      	AND  R17,R30
                 _0x2000015:
0006eb 2fa1      	MOV  R26,R17
0006ec df33      	RCALL _pcd8544_wrbyte
0006ed 8119      	LDD  R17,Y+1
0006ee 8108      	LDD  R16,Y+0
0006ef 940c 0b60 	JMP  _0x2100004
                 ; .FEND
                 _pcd8544_wrmasked_G100:
                 ; .FSTART _pcd8544_wrmasked_G100
0006f1 93aa      	ST   -Y,R26
0006f2 931a      	ST   -Y,R17
0006f3 81ed      	LDD  R30,Y+5
0006f4 93ea      	ST   -Y,R30
0006f5 81ad      	LDD  R26,Y+5
0006f6 df1b      	RCALL _pcd8544_rdbyte
0006f7 2f1e      	MOV  R17,R30
0006f8 81e9      	LDD  R30,Y+1
0006f9 30e7      	CPI  R30,LOW(0x7)
0006fa f011      	BREQ _0x2000020
0006fb 30e8      	CPI  R30,LOW(0x8)
0006fc f439      	BRNE _0x2000021
                 _0x2000020:
0006fd 81eb      	LDD  R30,Y+3
0006fe 93ea      	ST   -Y,R30
0006ff 81aa      	LDD  R26,Y+2
000700 940e 0b6d 	CALL _glcd_mappixcolor1bit
000702 83eb      	STD  Y+3,R30
000703 c008      	RJMP _0x2000022
                 _0x2000021:
000704 30e3      	CPI  R30,LOW(0x3)
000705 f421      	BRNE _0x2000024
000706 81eb      	LDD  R30,Y+3
000707 95e0      	COM  R30
000708 83eb      	STD  Y+3,R30
000709 c002      	RJMP _0x2000025
                 _0x2000024:
00070a 30e0      	CPI  R30,0
00070b f421      	BRNE _0x2000026
                 _0x2000025:
                 _0x2000022:
00070c 81ea      	LDD  R30,Y+2
00070d 95e0      	COM  R30
00070e 231e      	AND  R17,R30
00070f c002      	RJMP _0x2000027
                 _0x2000026:
000710 30e2      	CPI  R30,LOW(0x2)
000711 f429      	BRNE _0x2000028
                 _0x2000027:
000712 81ea      	LDD  R30,Y+2
000713 81ab      	LDD  R26,Y+3
000714 23ea      	AND  R30,R26
000715 2b1e      	OR   R17,R30
000716 c00e      	RJMP _0x200001E
                 _0x2000028:
000717 30e1      	CPI  R30,LOW(0x1)
000718 f429      	BRNE _0x2000029
000719 81ea      	LDD  R30,Y+2
00071a 81ab      	LDD  R26,Y+3
00071b 23ea      	AND  R30,R26
00071c 271e      	EOR  R17,R30
00071d c007      	RJMP _0x200001E
                 _0x2000029:
00071e 30e4      	CPI  R30,LOW(0x4)
00071f f429      	BRNE _0x200001E
000720 81ea      	LDD  R30,Y+2
000721 95e0      	COM  R30
000722 81ab      	LDD  R26,Y+3
000723 2bea      	OR   R30,R26
000724 231e      	AND  R17,R30
                 _0x200001E:
000725 2fa1      	MOV  R26,R17
000726 def9      	RCALL _pcd8544_wrbyte
000727 8118      	LDD  R17,Y+0
                 _0x2100009:
000728 9626      	ADIW R28,6
000729 9508      	RET
                 ; .FEND
                 _glcd_block:
                 ; .FSTART _glcd_block
00072a 93aa      	ST   -Y,R26
00072b 9723      	SBIW R28,3
00072c 940e 0e4e 	CALL __SAVELOCR6
00072e 89a8      	LDD  R26,Y+16
00072f 35a4      	CPI  R26,LOW(0x54)
000730 f448      	BRSH _0x200002C
000731 85af      	LDD  R26,Y+15
000732 33a0      	CPI  R26,LOW(0x30)
000733 f430      	BRSH _0x200002C
000734 85ae      	LDD  R26,Y+14
000735 30a0      	CPI  R26,LOW(0x0)
000736 f019      	BREQ _0x200002C
000737 85ad      	LDD  R26,Y+13
000738 30a0      	CPI  R26,LOW(0x0)
000739 f409      	BRNE _0x200002B
                 _0x200002C:
00073a c1cc      	RJMP _0x2100008
                 _0x200002B:
00073b 85ee      	LDD  R30,Y+14
00073c 87e8      	STD  Y+8,R30
00073d 89a8      	LDD  R26,Y+16
00073e 27bb      	CLR  R27
00073f 85ee      	LDD  R30,Y+14
000740 e0f0      	LDI  R31,0
000741 0fae      	ADD  R26,R30
000742 1fbf      	ADC  R27,R31
000743 35a5      	CPI  R26,LOW(0x55)
000744 e0e0      	LDI  R30,HIGH(0x55)
000745 07be      	CPC  R27,R30
000746 f020      	BRLO _0x200002E
000747 89a8      	LDD  R26,Y+16
000748 e5e4      	LDI  R30,LOW(84)
000749 1bea      	SUB  R30,R26
00074a 87ee      	STD  Y+14,R30
                 _0x200002E:
00074b 852d      	LDD  R18,Y+13
00074c 85af      	LDD  R26,Y+15
00074d 27bb      	CLR  R27
00074e 85ed      	LDD  R30,Y+13
00074f e0f0      	LDI  R31,0
000750 0fae      	ADD  R26,R30
000751 1fbf      	ADC  R27,R31
000752 97d1      	SBIW R26,49
000753 f020      	BRLO _0x200002F
000754 85af      	LDD  R26,Y+15
000755 e3e0      	LDI  R30,LOW(48)
000756 1bea      	SUB  R30,R26
000757 87ed      	STD  Y+13,R30
                 _0x200002F:
000758 85a9      	LDD  R26,Y+9
000759 30a6      	CPI  R26,LOW(0x6)
00075a f009      	BREQ PC+2
00075b c05b      	RJMP _0x2000030
00075c 85ec      	LDD  R30,Y+12
00075d 30e1      	CPI  R30,LOW(0x1)
00075e f409      	BRNE _0x2000034
00075f c1a7      	RJMP _0x2100008
                 _0x2000034:
000760 30e3      	CPI  R30,LOW(0x3)
000761 f439      	BRNE _0x2000037
                +
000762 91e0 021b+LDS R30 , _glcd_state + ( 27 )
000764 91f0 021c+LDS R31 , _glcd_state + ( 27 ) + 1
                 	__GETW1MN _glcd_state,27
000766 9730      	SBIW R30,0
000767 f409      	BRNE _0x2000036
000768 c19e      	RJMP _0x2100008
                 _0x2000036:
                 _0x2000037:
000769 8508      	LDD  R16,Y+8
00076a 85ed      	LDD  R30,Y+13
00076b 95e6      	LSR  R30
00076c 95e6      	LSR  R30
00076d 95e6      	LSR  R30
00076e 2f3e      	MOV  R19,R30
00076f 2fe2      	MOV  R30,R18
000770 70e7      	ANDI R30,LOW(0x7)
000771 f419      	BRNE _0x2000039
000772 85ad      	LDD  R26,Y+13
000773 172a      	CP   R18,R26
000774 f0e9      	BREQ _0x2000038
                 _0x2000039:
000775 2fa0      	MOV  R26,R16
000776 27bb      	CLR  R27
000777 2fe3      	MOV  R30,R19
000778 e0f0      	LDI  R31,0
000779 940e 0de5 	CALL __MULW12U
00077b 85aa      	LDD  R26,Y+10
00077c 85bb      	LDD  R27,Y+10+1
00077d 940e 0d39 	CALL SUBOPT_0x2B
00077f 9526      	LSR  R18
000780 9526      	LSR  R18
000781 9526      	LSR  R18
000782 2f53      	MOV  R21,R19
                 _0x200003B:
000783 935f      	PUSH R21
000784 5f5f      	SUBI R21,-1
000785 2fe2      	MOV  R30,R18
000786 91af      	POP  R26
000787 17ea      	CP   R30,R26
000788 f048      	BRLO _0x200003D
000789 2f10      	MOV  R17,R16
                 _0x200003E:
00078a 2fe1      	MOV  R30,R17
00078b 5011      	SUBI R17,1
00078c 30e0      	CPI  R30,0
00078d f019      	BREQ _0x2000040
00078e 940e 0d3e 	CALL SUBOPT_0x2C
000790 cff9      	RJMP _0x200003E
                 _0x2000040:
000791 cff1      	RJMP _0x200003B
                 _0x200003D:
                 _0x2000038:
000792 85ae      	LDD  R26,Y+14
000793 170a      	CP   R16,R26
000794 f111      	BREQ _0x2000041
000795 85ee      	LDD  R30,Y+14
000796 85aa      	LDD  R26,Y+10
000797 85bb      	LDD  R27,Y+10+1
000798 e0f0      	LDI  R31,0
000799 940e 0d39 	CALL SUBOPT_0x2B
00079b 85ed      	LDD  R30,Y+13
00079c 70e7      	ANDI R30,LOW(0x7)
00079d f009      	BREQ _0x2000042
00079e 5f3f      	SUBI R19,-LOW(1)
                 _0x2000042:
00079f e020      	LDI  R18,LOW(0)
                 _0x2000043:
0007a0 932f      	PUSH R18
0007a1 5f2f      	SUBI R18,-1
0007a2 2fe3      	MOV  R30,R19
0007a3 91af      	POP  R26
0007a4 17ae      	CP   R26,R30
0007a5 f488      	BRSH _0x2000045
0007a6 851e      	LDD  R17,Y+14
                 _0x2000046:
0007a7 931f      	PUSH R17
0007a8 5f1f      	SUBI R17,-1
0007a9 2fe0      	MOV  R30,R16
0007aa 91af      	POP  R26
0007ab 17ae      	CP   R26,R30
0007ac f418      	BRSH _0x2000048
0007ad 940e 0d3e 	CALL SUBOPT_0x2C
0007af cff7      	RJMP _0x2000046
                 _0x2000048:
0007b0 85ee      	LDD  R30,Y+14
0007b1 81ae      	LDD  R26,Y+6
0007b2 81bf      	LDD  R27,Y+6+1
0007b3 e0f0      	LDI  R31,0
0007b4 940e 0d39 	CALL SUBOPT_0x2B
0007b6 cfe9      	RJMP _0x2000043
                 _0x2000045:
                 _0x2000041:
                 _0x2000030:
0007b7 85ef      	LDD  R30,Y+15
0007b8 70e7      	ANDI R30,LOW(0x7)
0007b9 2f3e      	MOV  R19,R30
                 _0x2000049:
0007ba 85ed      	LDD  R30,Y+13
0007bb 30e0      	CPI  R30,0
0007bc f409      	BRNE PC+2
0007bd c149      	RJMP _0x200004B
0007be 85ea      	LDD  R30,Y+10
0007bf 85fb      	LDD  R31,Y+10+1
0007c0 83ee      	STD  Y+6,R30
0007c1 83ff      	STD  Y+6+1,R31
0007c2 e010      	LDI  R17,LOW(0)
0007c3 8908      	LDD  R16,Y+16
0007c4 3030      	CPI  R19,0
0007c5 f009      	BREQ PC+2
0007c6 c063      	RJMP _0x200004C
0007c7 85ad      	LDD  R26,Y+13
0007c8 30a8      	CPI  R26,LOW(0x8)
0007c9 f408      	BRSH PC+2
0007ca c05a      	RJMP _0x200004D
0007cb 85e9      	LDD  R30,Y+9
0007cc 30e0      	CPI  R30,0
0007cd f011      	BREQ _0x2000052
0007ce 30e3      	CPI  R30,LOW(0x3)
0007cf f409      	BRNE _0x2000053
                 _0x2000052:
0007d0 c002      	RJMP _0x2000054
                 _0x2000053:
0007d1 30e7      	CPI  R30,LOW(0x7)
0007d2 f409      	BRNE _0x2000055
                 _0x2000054:
0007d3 c002      	RJMP _0x2000056
                 _0x2000055:
0007d4 30e8      	CPI  R30,LOW(0x8)
0007d5 f409      	BRNE _0x2000057
                 _0x2000056:
0007d6 c002      	RJMP _0x2000058
                 _0x2000057:
0007d7 30e9      	CPI  R30,LOW(0x9)
0007d8 f409      	BRNE _0x2000059
                 _0x2000058:
0007d9 c002      	RJMP _0x200005A
                 _0x2000059:
0007da 30ea      	CPI  R30,LOW(0xA)
0007db f421      	BRNE _0x200005B
                 _0x200005A:
0007dc 930a      	ST   -Y,R16
0007dd 89a8      	LDD  R26,Y+16
0007de de25      	RCALL _pcd8544_gotoxy
0007df c004      	RJMP _0x2000050
                 _0x200005B:
0007e0 30e6      	CPI  R30,LOW(0x6)
0007e1 f411      	BRNE _0x2000050
0007e2 940e 0d4b 	CALL SUBOPT_0x2D
                 _0x2000050:
                 _0x200005D:
0007e4 931f      	PUSH R17
0007e5 5f1f      	SUBI R17,-1
0007e6 85ee      	LDD  R30,Y+14
0007e7 91af      	POP  R26
0007e8 17ae      	CP   R26,R30
0007e9 f5a0      	BRSH _0x200005F
0007ea 85a9      	LDD  R26,Y+9
0007eb 30a6      	CPI  R26,LOW(0x6)
0007ec f451      	BRNE _0x2000060
0007ed 940e 0d4f 	CALL SUBOPT_0x2E
0007ef 93fa      	ST   -Y,R31
0007f0 93ea      	ST   -Y,R30
0007f1 940e 0d2e 	CALL SUBOPT_0x2A
0007f3 81a0      	LD   R26,Z
0007f4 940e 0bb4 	CALL _glcd_writemem
0007f6 c026      	RJMP _0x2000061
                 _0x2000060:
0007f7 85e9      	LDD  R30,Y+9
0007f8 30e9      	CPI  R30,LOW(0x9)
0007f9 f411      	BRNE _0x2000065
0007fa e050      	LDI  R21,LOW(0)
0007fb c00e      	RJMP _0x2000066
                 _0x2000065:
0007fc 30ea      	CPI  R30,LOW(0xA)
0007fd f411      	BRNE _0x2000064
0007fe ef5f      	LDI  R21,LOW(255)
0007ff c00a      	RJMP _0x2000066
                 _0x2000064:
000800 940e 0d4f 	CALL SUBOPT_0x2E
000802 940e 0d58 	CALL SUBOPT_0x2F
000804 2f5e      	MOV  R21,R30
000805 85e9      	LDD  R30,Y+9
000806 30e7      	CPI  R30,LOW(0x7)
000807 f011      	BREQ _0x200006D
000808 30e8      	CPI  R30,LOW(0x8)
000809 f421      	BRNE _0x200006E
                 _0x200006D:
                 _0x2000066:
00080a 940e 0d5e 	CALL SUBOPT_0x30
00080c 2f5e      	MOV  R21,R30
00080d c006      	RJMP _0x200006F
                 _0x200006E:
00080e 30e3      	CPI  R30,LOW(0x3)
00080f f411      	BRNE _0x2000071
000810 9550      	COM  R21
000811 c002      	RJMP _0x2000072
                 _0x2000071:
000812 30e0      	CPI  R30,0
000813 f419      	BRNE _0x2000074
                 _0x2000072:
                 _0x200006F:
000814 2fa5      	MOV  R26,R21
000815 ddd2      	RCALL _pcd8544_wrdata_G100
000816 c006      	RJMP _0x200006B
                 _0x2000074:
000817 940e 0d62 	CALL SUBOPT_0x31
000819 efef      	LDI  R30,LOW(255)
00081a 93ea      	ST   -Y,R30
00081b 85ad      	LDD  R26,Y+13
00081c ded4      	RCALL _pcd8544_wrmasked_G100
                 _0x200006B:
                 _0x2000061:
00081d cfc6      	RJMP _0x200005D
                 _0x200005F:
00081e 85ef      	LDD  R30,Y+15
00081f 5fe8      	SUBI R30,-LOW(8)
000820 87ef      	STD  Y+15,R30
000821 85ed      	LDD  R30,Y+13
000822 50e8      	SUBI R30,LOW(8)
000823 87ed      	STD  Y+13,R30
000824 c0d9      	RJMP _0x2000075
                 _0x200004D:
000825 855d      	LDD  R21,Y+13
000826 e020      	LDI  R18,LOW(0)
000827 e0e0      	LDI  R30,LOW(0)
000828 87ed      	STD  Y+13,R30
000829 c07e      	RJMP _0x2000076
                 _0x200004C:
00082a 2fe3      	MOV  R30,R19
00082b 85ad      	LDD  R26,Y+13
00082c 0fae      	ADD  R26,R30
00082d 30a9      	CPI  R26,LOW(0x9)
00082e f420      	BRSH _0x2000077
00082f 852d      	LDD  R18,Y+13
000830 e0e0      	LDI  R30,LOW(0)
000831 87ed      	STD  Y+13,R30
000832 c003      	RJMP _0x2000078
                 _0x2000077:
000833 e0e8      	LDI  R30,LOW(8)
000834 1be3      	SUB  R30,R19
000835 2f2e      	MOV  R18,R30
                 _0x2000078:
000836 933a      	ST   -Y,R19
000837 2fa2      	MOV  R26,R18
000838 940e 0b62 	CALL _glcd_getmask
00083a 2f4e      	MOV  R20,R30
00083b 85e9      	LDD  R30,Y+9
00083c 30e6      	CPI  R30,LOW(0x6)
00083d f511      	BRNE _0x200007C
00083e 940e 0d4b 	CALL SUBOPT_0x2D
                 _0x200007D:
000840 931f      	PUSH R17
000841 5f1f      	SUBI R17,-1
000842 85ee      	LDD  R30,Y+14
000843 91af      	POP  R26
000844 17ae      	CP   R26,R30
000845 f4c8      	BRSH _0x200007F
000846 940e 0d2e 	CALL SUBOPT_0x2A
000848 81e0      	LD   R30,Z
000849 23e4      	AND  R30,R20
00084a 2fae      	MOV  R26,R30
00084b 2fe3      	MOV  R30,R19
00084c 940e 0dd4 	CALL __LSRB12
00084e 940e 0d68 	CALL SUBOPT_0x32
000850 2fe3      	MOV  R30,R19
000851 2fa4      	MOV  R26,R20
000852 940e 0dd4 	CALL __LSRB12
000854 95e0      	COM  R30
000855 21e1      	AND  R30,R1
000856 2b5e      	OR   R21,R30
000857 940e 0d4f 	CALL SUBOPT_0x2E
000859 93fa      	ST   -Y,R31
00085a 93ea      	ST   -Y,R30
00085b 2fa5      	MOV  R26,R21
00085c 940e 0bb4 	CALL _glcd_writemem
00085e cfe1      	RJMP _0x200007D
                 _0x200007F:
00085f c02c      	RJMP _0x200007B
                 _0x200007C:
000860 30e9      	CPI  R30,LOW(0x9)
000861 f411      	BRNE _0x2000080
000862 e050      	LDI  R21,LOW(0)
000863 c003      	RJMP _0x2000081
                 _0x2000080:
000864 30ea      	CPI  R30,LOW(0xA)
000865 f4a9      	BRNE _0x2000087
000866 ef5f      	LDI  R21,LOW(255)
                 _0x2000081:
000867 940e 0d5e 	CALL SUBOPT_0x30
000869 2fae      	MOV  R26,R30
00086a 2fe3      	MOV  R30,R19
00086b 940e 0dcc 	CALL __LSLB12
00086d 2f5e      	MOV  R21,R30
                 _0x2000084:
00086e 931f      	PUSH R17
00086f 5f1f      	SUBI R17,-1
000870 85ee      	LDD  R30,Y+14
000871 91af      	POP  R26
000872 17ae      	CP   R26,R30
000873 f430      	BRSH _0x2000086
000874 940e 0d62 	CALL SUBOPT_0x31
000876 934a      	ST   -Y,R20
000877 e0a0      	LDI  R26,LOW(0)
000878 de78      	RCALL _pcd8544_wrmasked_G100
000879 cff4      	RJMP _0x2000084
                 _0x2000086:
00087a c011      	RJMP _0x200007B
                 _0x2000087:
                 _0x2000088:
00087b 931f      	PUSH R17
00087c 5f1f      	SUBI R17,-1
00087d 85ee      	LDD  R30,Y+14
00087e 91af      	POP  R26
00087f 17ae      	CP   R26,R30
000880 f458      	BRSH _0x200008A
000881 940e 0d73 	CALL SUBOPT_0x33
000883 2fae      	MOV  R26,R30
000884 2fe3      	MOV  R30,R19
000885 940e 0dcc 	CALL __LSLB12
000887 93ea      	ST   -Y,R30
000888 934a      	ST   -Y,R20
000889 85ad      	LDD  R26,Y+13
00088a de66      	RCALL _pcd8544_wrmasked_G100
00088b cfef      	RJMP _0x2000088
                 _0x200008A:
                 _0x200007B:
00088c 85ed      	LDD  R30,Y+13
00088d 30e0      	CPI  R30,0
00088e f409      	BRNE _0x200008B
00088f c077      	RJMP _0x200004B
                 _0x200008B:
000890 85ad      	LDD  R26,Y+13
000891 30a8      	CPI  R26,LOW(0x8)
000892 f428      	BRSH _0x200008C
000893 85ed      	LDD  R30,Y+13
000894 1be2      	SUB  R30,R18
000895 2f5e      	MOV  R21,R30
000896 e0e0      	LDI  R30,LOW(0)
000897 c003      	RJMP _0x20000A1
                 _0x200008C:
000898 2f53      	MOV  R21,R19
000899 85ed      	LDD  R30,Y+13
00089a 50e8      	SUBI R30,LOW(8)
                 _0x20000A1:
00089b 87ed      	STD  Y+13,R30
00089c e010      	LDI  R17,LOW(0)
00089d 85ef      	LDD  R30,Y+15
00089e 5fe8      	SUBI R30,-LOW(8)
00089f 87ef      	STD  Y+15,R30
0008a0 e0e8      	LDI  R30,LOW(8)
0008a1 1be3      	SUB  R30,R19
0008a2 2f2e      	MOV  R18,R30
0008a3 8908      	LDD  R16,Y+16
0008a4 85ea      	LDD  R30,Y+10
0008a5 85fb      	LDD  R31,Y+10+1
0008a6 83ee      	STD  Y+6,R30
0008a7 83ff      	STD  Y+6+1,R31
                 _0x2000076:
0008a8 2fe5      	MOV  R30,R21
0008a9 e0f0      	LDI  R31,0
0008aa 59e6      	SUBI R30,LOW(-__glcd_mask*2)
0008ab 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
0008ac 9144      	LPM  R20,Z
0008ad 85e9      	LDD  R30,Y+9
0008ae 30e6      	CPI  R30,LOW(0x6)
0008af f511      	BRNE _0x2000091
0008b0 940e 0d4b 	CALL SUBOPT_0x2D
                 _0x2000092:
0008b2 931f      	PUSH R17
0008b3 5f1f      	SUBI R17,-1
0008b4 85ee      	LDD  R30,Y+14
0008b5 91af      	POP  R26
0008b6 17ae      	CP   R26,R30
0008b7 f4c8      	BRSH _0x2000094
0008b8 940e 0d2e 	CALL SUBOPT_0x2A
0008ba 81e0      	LD   R30,Z
0008bb 23e4      	AND  R30,R20
0008bc 2fae      	MOV  R26,R30
0008bd 2fe2      	MOV  R30,R18
0008be 940e 0dcc 	CALL __LSLB12
0008c0 940e 0d68 	CALL SUBOPT_0x32
0008c2 2fe2      	MOV  R30,R18
0008c3 2fa4      	MOV  R26,R20
0008c4 940e 0dcc 	CALL __LSLB12
0008c6 95e0      	COM  R30
0008c7 21e1      	AND  R30,R1
0008c8 2b5e      	OR   R21,R30
0008c9 940e 0d4f 	CALL SUBOPT_0x2E
0008cb 93fa      	ST   -Y,R31
0008cc 93ea      	ST   -Y,R30
0008cd 2fa5      	MOV  R26,R21
0008ce 940e 0bb4 	CALL _glcd_writemem
0008d0 cfe1      	RJMP _0x2000092
                 _0x2000094:
0008d1 c02c      	RJMP _0x2000090
                 _0x2000091:
0008d2 30e9      	CPI  R30,LOW(0x9)
0008d3 f411      	BRNE _0x2000095
0008d4 e050      	LDI  R21,LOW(0)
0008d5 c003      	RJMP _0x2000096
                 _0x2000095:
0008d6 30ea      	CPI  R30,LOW(0xA)
0008d7 f4a9      	BRNE _0x200009C
0008d8 ef5f      	LDI  R21,LOW(255)
                 _0x2000096:
0008d9 940e 0d5e 	CALL SUBOPT_0x30
0008db 2fae      	MOV  R26,R30
0008dc 2fe2      	MOV  R30,R18
0008dd 940e 0dd4 	CALL __LSRB12
0008df 2f5e      	MOV  R21,R30
                 _0x2000099:
0008e0 931f      	PUSH R17
0008e1 5f1f      	SUBI R17,-1
0008e2 85ee      	LDD  R30,Y+14
0008e3 91af      	POP  R26
0008e4 17ae      	CP   R26,R30
0008e5 f430      	BRSH _0x200009B
0008e6 940e 0d62 	CALL SUBOPT_0x31
0008e8 934a      	ST   -Y,R20
0008e9 e0a0      	LDI  R26,LOW(0)
0008ea de06      	RCALL _pcd8544_wrmasked_G100
0008eb cff4      	RJMP _0x2000099
                 _0x200009B:
0008ec c011      	RJMP _0x2000090
                 _0x200009C:
                 _0x200009D:
0008ed 931f      	PUSH R17
0008ee 5f1f      	SUBI R17,-1
0008ef 85ee      	LDD  R30,Y+14
0008f0 91af      	POP  R26
0008f1 17ae      	CP   R26,R30
0008f2 f458      	BRSH _0x200009F
0008f3 940e 0d73 	CALL SUBOPT_0x33
0008f5 2fae      	MOV  R26,R30
0008f6 2fe2      	MOV  R30,R18
0008f7 940e 0dd4 	CALL __LSRB12
0008f9 93ea      	ST   -Y,R30
0008fa 934a      	ST   -Y,R20
0008fb 85ad      	LDD  R26,Y+13
0008fc ddf4      	RCALL _pcd8544_wrmasked_G100
0008fd cfef      	RJMP _0x200009D
                 _0x200009F:
                 _0x2000090:
                 _0x2000075:
0008fe 85e8      	LDD  R30,Y+8
0008ff 85aa      	LDD  R26,Y+10
000900 85bb      	LDD  R27,Y+10+1
000901 e0f0      	LDI  R31,0
000902 0fea      	ADD  R30,R26
000903 1ffb      	ADC  R31,R27
000904 87ea      	STD  Y+10,R30
000905 87fb      	STD  Y+10+1,R31
000906 ceb3      	RJMP _0x2000049
                 _0x200004B:
                 _0x2100008:
000907 940e 0e55 	CALL __LOADLOCR6
000909 9661      	ADIW R28,17
00090a 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_clipx:
                 ; .FSTART _glcd_clipx
00090b 940e 0d80 	CALL SUBOPT_0x34
00090d f024      	BRLT _0x2020003
00090e e0e0      	LDI  R30,LOW(0)
00090f e0f0      	LDI  R31,HIGH(0)
000910 940c 0b6b 	JMP  _0x2100003
                 _0x2020003:
000912 81a8      	LD   R26,Y
000913 81b9      	LDD  R27,Y+1
000914 35a4      	CPI  R26,LOW(0x54)
000915 e0e0      	LDI  R30,HIGH(0x54)
000916 07be      	CPC  R27,R30
000917 f024      	BRLT _0x2020004
000918 e5e3      	LDI  R30,LOW(83)
000919 e0f0      	LDI  R31,HIGH(83)
00091a 940c 0b6b 	JMP  _0x2100003
                 _0x2020004:
00091c 81e8      	LD   R30,Y
00091d 81f9      	LDD  R31,Y+1
00091e 940c 0b6b 	JMP  _0x2100003
                 ; .FEND
                 _glcd_clipy:
                 ; .FSTART _glcd_clipy
000920 940e 0d80 	CALL SUBOPT_0x34
000922 f024      	BRLT _0x2020005
000923 e0e0      	LDI  R30,LOW(0)
000924 e0f0      	LDI  R31,HIGH(0)
000925 940c 0b6b 	JMP  _0x2100003
                 _0x2020005:
000927 81a8      	LD   R26,Y
000928 81b9      	LDD  R27,Y+1
000929 97d0      	SBIW R26,48
00092a f024      	BRLT _0x2020006
00092b e2ef      	LDI  R30,LOW(47)
00092c e0f0      	LDI  R31,HIGH(47)
00092d 940c 0b6b 	JMP  _0x2100003
                 _0x2020006:
00092f 81e8      	LD   R30,Y
000930 81f9      	LDD  R31,Y+1
000931 940c 0b6b 	JMP  _0x2100003
                 ; .FEND
                 _glcd_getcharw_G101:
                 ; .FSTART _glcd_getcharw_G101
000933 93ba      	ST   -Y,R27
000934 93aa      	ST   -Y,R26
000935 9723      	SBIW R28,3
000936 940e 0d87 	CALL SUBOPT_0x35
000938 018f      	MOVW R16,R30
000939 2e00      	MOV  R0,R16
00093a 2a01      	OR   R0,R17
00093b f419      	BRNE _0x202000B
00093c e0e0      	LDI  R30,LOW(0)
00093d e0f0      	LDI  R31,HIGH(0)
00093e c05f      	RJMP _0x2100007
                 _0x202000B:
00093f 940e 0d8e 	CALL SUBOPT_0x36
000941 820f      	STD  Y+7,R0
000942 940e 0d8e 	CALL SUBOPT_0x36
000944 820e      	STD  Y+6,R0
000945 940e 0d8e 	CALL SUBOPT_0x36
000947 8608      	STD  Y+8,R0
000948 85eb      	LDD  R30,Y+11
000949 85a8      	LDD  R26,Y+8
00094a 17ea      	CP   R30,R26
00094b f418      	BRSH _0x202000C
00094c e0e0      	LDI  R30,LOW(0)
00094d e0f0      	LDI  R31,HIGH(0)
00094e c04f      	RJMP _0x2100007
                 _0x202000C:
00094f 01f8      	MOVW R30,R16
                +
000950 5f0f     +SUBI R16 , LOW ( - 1 )
000951 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000952 9154      	LPM  R21,Z
000953 85a8      	LDD  R26,Y+8
000954 27bb      	CLR  R27
000955 27ee      	CLR  R30
000956 0fa5      	ADD  R26,R21
000957 1fbe      	ADC  R27,R30
000958 85eb      	LDD  R30,Y+11
000959 e0f0      	LDI  R31,0
00095a 17ea      	CP   R30,R26
00095b 07fb      	CPC  R31,R27
00095c f018      	BRLO _0x202000D
00095d e0e0      	LDI  R30,LOW(0)
00095e e0f0      	LDI  R31,HIGH(0)
00095f c03e      	RJMP _0x2100007
                 _0x202000D:
000960 81ee      	LDD  R30,Y+6
000961 95e6      	LSR  R30
000962 95e6      	LSR  R30
000963 95e6      	LSR  R30
000964 2f4e      	MOV  R20,R30
000965 81ee      	LDD  R30,Y+6
000966 70e7      	ANDI R30,LOW(0x7)
000967 f009      	BREQ _0x202000E
000968 5f4f      	SUBI R20,-LOW(1)
                 _0x202000E:
000969 81ef      	LDD  R30,Y+7
00096a 30e0      	CPI  R30,0
00096b f0a1      	BREQ _0x202000F
00096c 85a9      	LDD  R26,Y+9
00096d 85ba      	LDD  R27,Y+9+1
00096e 93ec      	ST   X,R30
00096f 85a8      	LDD  R26,Y+8
000970 85eb      	LDD  R30,Y+11
000971 1bea      	SUB  R30,R26
000972 e0f0      	LDI  R31,0
000973 01df      	MOVW R26,R30
000974 81ef      	LDD  R30,Y+7
000975 e0f0      	LDI  R31,0
000976 940e 0de5 	CALL __MULW12U
000978 01df      	MOVW R26,R30
000979 2fe4      	MOV  R30,R20
00097a e0f0      	LDI  R31,0
00097b 940e 0de5 	CALL __MULW12U
00097d 0fe0      	ADD  R30,R16
00097e 1ff1      	ADC  R31,R17
00097f c01e      	RJMP _0x2100007
                 _0x202000F:
000980 0198      	MOVW R18,R16
000981 2fe5      	MOV  R30,R21
000982 e0f0      	LDI  R31,0
                +
000983 0f0e     +ADD R16 , R30
000984 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
                 _0x2020010:
000985 85a8      	LDD  R26,Y+8
000986 5faf      	SUBI R26,-LOW(1)
000987 87a8      	STD  Y+8,R26
000988 50a1      	SUBI R26,LOW(1)
000989 85eb      	LDD  R30,Y+11
00098a 17ae      	CP   R26,R30
00098b f460      	BRSH _0x2020012
00098c 01f9      	MOVW R30,R18
                +
00098d 5f2f     +SUBI R18 , LOW ( - 1 )
00098e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00098f 91a4      	LPM  R26,Z
000990 e0b0      	LDI  R27,0
000991 2fe4      	MOV  R30,R20
000992 e0f0      	LDI  R31,0
000993 940e 0de5 	CALL __MULW12U
                +
000995 0f0e     +ADD R16 , R30
000996 1f1f     +ADC R17 , R31
                 	__ADDWRR 16,17,30,31
000997 cfed      	RJMP _0x2020010
                 _0x2020012:
000998 01f9      	MOVW R30,R18
000999 91e4      	LPM  R30,Z
00099a 85a9      	LDD  R26,Y+9
00099b 85ba      	LDD  R27,Y+9+1
00099c 93ec      	ST   X,R30
00099d 01f8      	MOVW R30,R16
                 _0x2100007:
00099e 940e 0e55 	CALL __LOADLOCR6
0009a0 962c      	ADIW R28,12
0009a1 9508      	RET
                 ; .FEND
                 _glcd_new_line_G101:
                 ; .FSTART _glcd_new_line_G101
0009a2 e0e0      	LDI  R30,LOW(0)
                +
0009a3 93e0 0202+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
                +
0009a5 91a0 0203+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
0009a7 27bb      	CLR  R27
0009a8 940e 0d93 	CALL SUBOPT_0x37
0009aa e0f0      	LDI  R31,0
0009ab 0fae      	ADD  R26,R30
0009ac 1fbf      	ADC  R27,R31
                +
0009ad 91e0 0207+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
0009af e0f0      	LDI  R31,0
0009b0 0fae      	ADD  R26,R30
0009b1 1fbf      	ADC  R27,R31
0009b2 df6d      	RCALL _glcd_clipy
                +
0009b3 93e0 0203+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
0009b5 9508      	RET
                 ; .FEND
                 _glcd_putchar:
                 ; .FSTART _glcd_putchar
0009b6 93aa      	ST   -Y,R26
0009b7 9721      	SBIW R28,1
0009b8 940e 0d87 	CALL SUBOPT_0x35
0009ba 9730      	SBIW R30,0
0009bb f409      	BRNE PC+2
0009bc c055      	RJMP _0x202001F
0009bd 81af      	LDD  R26,Y+7
0009be 30aa      	CPI  R26,LOW(0xA)
0009bf f409      	BRNE _0x2020020
0009c0 c04f      	RJMP _0x2020021
                 _0x2020020:
0009c1 81ef      	LDD  R30,Y+7
0009c2 93ea      	ST   -Y,R30
0009c3 01de      	MOVW R26,R28
0009c4 9617      	ADIW R26,7
0009c5 df6d      	RCALL _glcd_getcharw_G101
0009c6 01af      	MOVW R20,R30
0009c7 9730      	SBIW R30,0
0009c8 f409      	BRNE _0x2020022
0009c9 c04a      	RJMP _0x2100006
                 _0x2020022:
                +
0009ca 91e0 0206+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
0009cc 81ae      	LDD  R26,Y+6
0009cd 0fea      	ADD  R30,R26
0009ce 2f3e      	MOV  R19,R30
                +
0009cf 91a0 0202+LDS R26 , _glcd_state + ( 2 )
                 	__GETB2MN _glcd_state,2
0009d1 27bb      	CLR  R27
0009d2 e0f0      	LDI  R31,0
0009d3 0fea      	ADD  R30,R26
0009d4 1ffb      	ADC  R31,R27
0009d5 018f      	MOVW R16,R30
                +
0009d6 3505     +CPI R16 , LOW ( 85 )
0009d7 e0e0     +LDI R30 , HIGH ( 85 )
0009d8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,85
0009d9 f018      	BRLO _0x2020023
0009da 2f03      	MOV  R16,R19
0009db 2711      	CLR  R17
0009dc dfc5      	RCALL _glcd_new_line_G101
                 _0x2020023:
                +
0009dd 91e0 0202+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
0009df 93ea      	ST   -Y,R30
                +
0009e0 91e0 0203+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
0009e2 93ea      	ST   -Y,R30
0009e3 85e8      	LDD  R30,Y+8
0009e4 93ea      	ST   -Y,R30
0009e5 940e 0d93 	CALL SUBOPT_0x37
0009e7 93ea      	ST   -Y,R30
0009e8 e0e1      	LDI  R30,LOW(1)
0009e9 93ea      	ST   -Y,R30
0009ea 935a      	ST   -Y,R21
0009eb 934a      	ST   -Y,R20
0009ec e0a7      	LDI  R26,LOW(7)
0009ed dd3c      	RCALL _glcd_block
                +
0009ee 91e0 0202+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
0009f0 81ae      	LDD  R26,Y+6
0009f1 0fea      	ADD  R30,R26
0009f2 93ea      	ST   -Y,R30
                +
0009f3 91e0 0203+LDS R30 , _glcd_state + ( 3 )
                 	__GETB1MN _glcd_state,3
0009f5 93ea      	ST   -Y,R30
                +
0009f6 91e0 0206+LDS R30 , _glcd_state + ( 6 )
                 	__GETB1MN _glcd_state,6
0009f8 93ea      	ST   -Y,R30
0009f9 940e 0d93 	CALL SUBOPT_0x37
0009fb 940e 0d9a 	CALL SUBOPT_0x38
                +
0009fd 91e0 0202+LDS R30 , _glcd_state + ( 2 )
                 	__GETB1MN _glcd_state,2
0009ff 93ea      	ST   -Y,R30
                +
000a00 91a0 0203+LDS R26 , _glcd_state + ( 3 )
                 	__GETB2MN _glcd_state,3
000a02 940e 0d93 	CALL SUBOPT_0x37
000a04 0fea      	ADD  R30,R26
000a05 93ea      	ST   -Y,R30
000a06 933a      	ST   -Y,R19
                +
000a07 91e0 0207+LDS R30 , _glcd_state + ( 7 )
                 	__GETB1MN _glcd_state,7
000a09 940e 0d9a 	CALL SUBOPT_0x38
000a0b e5e4      	LDI  R30,LOW(84)
000a0c e0f0      	LDI  R31,HIGH(84)
000a0d 17e0      	CP   R30,R16
000a0e 07f1      	CPC  R31,R17
000a0f f411      	BRNE _0x2020024
                 _0x2020021:
000a10 df91      	RCALL _glcd_new_line_G101
000a11 c002      	RJMP _0x2100006
                 _0x2020024:
                 _0x202001F:
                +
000a12 9300 0202+STS _glcd_state + ( 2 ) , R16
                 	__PUTBMRN _glcd_state,2,16
                 _0x2100006:
000a14 940e 0e55 	CALL __LOADLOCR6
000a16 9628      	ADIW R28,8
000a17 9508      	RET
                 ; .FEND
                 _glcd_putcharxy:
                 ; .FSTART _glcd_putcharxy
000a18 93aa      	ST   -Y,R26
000a19 81ea      	LDD  R30,Y+2
000a1a 93ea      	ST   -Y,R30
000a1b 81aa      	LDD  R26,Y+2
000a1c d033      	RCALL _glcd_moveto
000a1d 81a8      	LD   R26,Y
000a1e df97      	RCALL _glcd_putchar
000a1f c192      	RJMP _0x2100002
                 ; .FEND
                 _glcd_outtextxyf:
                 ; .FSTART _glcd_outtextxyf
000a20 93ba      	ST   -Y,R27
000a21 93aa      	ST   -Y,R26
000a22 931a      	ST   -Y,R17
000a23 81ec      	LDD  R30,Y+4
000a24 93ea      	ST   -Y,R30
000a25 81ac      	LDD  R26,Y+4
000a26 d029      	RCALL _glcd_moveto
                 _0x2020028:
000a27 81e9      	LDD  R30,Y+1
000a28 81fa      	LDD  R31,Y+1+1
000a29 9631      	ADIW R30,1
000a2a 83e9      	STD  Y+1,R30
000a2b 83fa      	STD  Y+1+1,R31
000a2c 9731      	SBIW R30,1
000a2d 91e4      	LPM  R30,Z
000a2e 2f1e      	MOV  R17,R30
000a2f 30e0      	CPI  R30,0
000a30 f019      	BREQ _0x202002A
000a31 2fa1      	MOV  R26,R17
000a32 df83      	RCALL _glcd_putchar
000a33 cff3      	RJMP _0x2020028
                 _0x202002A:
000a34 8118      	LDD  R17,Y+0
000a35 c12a      	RJMP _0x2100004
                 ; .FEND
                 _glcd_putpixelm_G101:
                 ; .FSTART _glcd_putpixelm_G101
000a36 93aa      	ST   -Y,R26
000a37 81ea      	LDD  R30,Y+2
000a38 93ea      	ST   -Y,R30
000a39 81ea      	LDD  R30,Y+2
000a3a 93ea      	ST   -Y,R30
                +
000a3b 91e0 0209+LDS R30 , _glcd_state + ( 9 )
                 	__GETB1MN _glcd_state,9
000a3d 81aa      	LDD  R26,Y+2
000a3e 23ea      	AND  R30,R26
000a3f f019      	BREQ _0x202003E
000a40 91e0 0200 	LDS  R30,_glcd_state
000a42 c002      	RJMP _0x202003F
                 _0x202003E:
                +
000a43 91e0 0201+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
                 _0x202003F:
000a45 2fae      	MOV  R26,R30
000a46 dc84      	RCALL _glcd_putpixel
000a47 81e8      	LD   R30,Y
000a48 0fee      	LSL  R30
000a49 83e8      	ST   Y,R30
000a4a 30e0      	CPI  R30,0
000a4b f411      	BRNE _0x2020041
000a4c e0e1      	LDI  R30,LOW(1)
000a4d 83e8      	ST   Y,R30
                 _0x2020041:
000a4e 81e8      	LD   R30,Y
000a4f c162      	RJMP _0x2100002
                 ; .FEND
                 _glcd_moveto:
                 ; .FSTART _glcd_moveto
000a50 93aa      	ST   -Y,R26
000a51 81a9      	LDD  R26,Y+1
000a52 27bb      	CLR  R27
000a53 deb7      	RCALL _glcd_clipx
                +
000a54 93e0 0202+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000a56 81a8      	LD   R26,Y
000a57 27bb      	CLR  R27
000a58 dec7      	RCALL _glcd_clipy
                +
000a59 93e0 0203+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000a5b c10f      	RJMP _0x2100003
                 ; .FEND
                 _glcd_line:
                 ; .FSTART _glcd_line
000a5c 93aa      	ST   -Y,R26
000a5d 972b      	SBIW R28,11
000a5e 940e 0e4e 	CALL __SAVELOCR6
000a60 89ac      	LDD  R26,Y+20
000a61 27bb      	CLR  R27
000a62 dea8      	RCALL _glcd_clipx
000a63 8bec      	STD  Y+20,R30
000a64 89aa      	LDD  R26,Y+18
000a65 27bb      	CLR  R27
000a66 dea4      	RCALL _glcd_clipx
000a67 8bea      	STD  Y+18,R30
000a68 89ab      	LDD  R26,Y+19
000a69 27bb      	CLR  R27
000a6a deb5      	RCALL _glcd_clipy
000a6b 8beb      	STD  Y+19,R30
000a6c 89a9      	LDD  R26,Y+17
000a6d 27bb      	CLR  R27
000a6e deb1      	RCALL _glcd_clipy
000a6f 8be9      	STD  Y+17,R30
000a70 89ea      	LDD  R30,Y+18
                +
000a71 93e0 0202+STS _glcd_state + ( 2 ) , R30
                 	__PUTB1MN _glcd_state,2
000a73 89e9      	LDD  R30,Y+17
                +
000a74 93e0 0203+STS _glcd_state + ( 3 ) , R30
                 	__PUTB1MN _glcd_state,3
000a76 e0e1      	LDI  R30,LOW(1)
000a77 87e8      	STD  Y+8,R30
000a78 89e9      	LDD  R30,Y+17
000a79 89ab      	LDD  R26,Y+19
000a7a 17ea      	CP   R30,R26
000a7b f571      	BRNE _0x2020042
000a7c 891c      	LDD  R17,Y+20
000a7d 89aa      	LDD  R26,Y+18
000a7e 171a      	CP   R17,R26
000a7f f431      	BRNE _0x2020043
000a80 931a      	ST   -Y,R17
000a81 89ec      	LDD  R30,Y+20
000a82 93ea      	ST   -Y,R30
000a83 e0a1      	LDI  R26,LOW(1)
000a84 dfb1      	RCALL _glcd_putpixelm_G101
000a85 c0c8      	RJMP _0x2100005
                 _0x2020043:
000a86 89aa      	LDD  R26,Y+18
000a87 171a      	CP   R17,R26
000a88 f430      	BRSH _0x2020044
000a89 89ea      	LDD  R30,Y+18
000a8a 1be1      	SUB  R30,R17
000a8b 2f0e      	MOV  R16,R30
                +
000a8c e041     +LDI R20 , LOW ( 1 )
000a8d e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
000a8e c006      	RJMP _0x2020045
                 _0x2020044:
000a8f 89aa      	LDD  R26,Y+18
000a90 2fe1      	MOV  R30,R17
000a91 1bea      	SUB  R30,R26
000a92 2f0e      	MOV  R16,R30
                +
000a93 ef4f     +LDI R20 , LOW ( - 1 )
000a94 ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
                 _0x2020045:
                 _0x2020047:
000a95 893b      	LDD  R19,Y+19
000a96 e0e0      	LDI  R30,LOW(0)
000a97 83ee      	STD  Y+6,R30
                 _0x2020049:
000a98 940e 0da4 	CALL SUBOPT_0x39
000a9a f438      	BRSH _0x202004B
000a9b 931a      	ST   -Y,R17
000a9c 933a      	ST   -Y,R19
000a9d 9533      	INC  R19
000a9e 85aa      	LDD  R26,Y+10
000a9f df96      	RCALL _glcd_putpixelm_G101
000aa0 83ef      	STD  Y+7,R30
000aa1 cff6      	RJMP _0x2020049
                 _0x202004B:
000aa2 81ef      	LDD  R30,Y+7
000aa3 87e8      	STD  Y+8,R30
000aa4 0f14      	ADD  R17,R20
000aa5 2fe0      	MOV  R30,R16
000aa6 5001      	SUBI R16,1
000aa7 30e0      	CPI  R30,0
000aa8 f761      	BRNE _0x2020047
000aa9 c0a4      	RJMP _0x202004C
                 _0x2020042:
000aaa 89ea      	LDD  R30,Y+18
000aab 89ac      	LDD  R26,Y+20
000aac 17ea      	CP   R30,R26
000aad f539      	BRNE _0x202004D
000aae 893b      	LDD  R19,Y+19
000aaf 89a9      	LDD  R26,Y+17
000ab0 173a      	CP   R19,R26
000ab1 f430      	BRSH _0x202004E
000ab2 89e9      	LDD  R30,Y+17
000ab3 1be3      	SUB  R30,R19
000ab4 2f2e      	MOV  R18,R30
000ab5 e0e1      	LDI  R30,LOW(1)
000ab6 e0f0      	LDI  R31,HIGH(1)
000ab7 c006      	RJMP _0x202011B
                 _0x202004E:
000ab8 89a9      	LDD  R26,Y+17
000ab9 2fe3      	MOV  R30,R19
000aba 1bea      	SUB  R30,R26
000abb 2f2e      	MOV  R18,R30
000abc efef      	LDI  R30,LOW(65535)
000abd efff      	LDI  R31,HIGH(65535)
                 _0x202011B:
000abe 87ed      	STD  Y+13,R30
000abf 87fe      	STD  Y+13+1,R31
                 _0x2020051:
000ac0 891c      	LDD  R17,Y+20
000ac1 e0e0      	LDI  R30,LOW(0)
000ac2 83ee      	STD  Y+6,R30
                 _0x2020053:
000ac3 940e 0da4 	CALL SUBOPT_0x39
000ac5 f430      	BRSH _0x2020055
000ac6 931a      	ST   -Y,R17
000ac7 9513      	INC  R17
000ac8 940e 0dac 	CALL SUBOPT_0x3A
000aca 83ef      	STD  Y+7,R30
000acb cff7      	RJMP _0x2020053
                 _0x2020055:
000acc 81ef      	LDD  R30,Y+7
000acd 87e8      	STD  Y+8,R30
000ace 85ed      	LDD  R30,Y+13
000acf 0f3e      	ADD  R19,R30
000ad0 2fe2      	MOV  R30,R18
000ad1 5021      	SUBI R18,1
000ad2 30e0      	CPI  R30,0
000ad3 f761      	BRNE _0x2020051
000ad4 c079      	RJMP _0x2020056
                 _0x202004D:
000ad5 e0e0      	LDI  R30,LOW(0)
000ad6 83ee      	STD  Y+6,R30
                 _0x2020057:
000ad7 940e 0da4 	CALL SUBOPT_0x39
000ad9 f008      	BRLO PC+2
000ada c073      	RJMP _0x2020059
000adb 891c      	LDD  R17,Y+20
000adc 893b      	LDD  R19,Y+19
000add e0e1      	LDI  R30,LOW(1)
000ade 2f2e      	MOV  R18,R30
000adf 2f0e      	MOV  R16,R30
000ae0 89aa      	LDD  R26,Y+18
000ae1 27bb      	CLR  R27
000ae2 89ec      	LDD  R30,Y+20
000ae3 e0f0      	LDI  R31,0
000ae4 1bae      	SUB  R26,R30
000ae5 0bbf      	SBC  R27,R31
000ae6 01ad      	MOVW R20,R26
000ae7 2355      	TST  R21
000ae8 f42a      	BRPL _0x202005A
000ae9 ef0f      	LDI  R16,LOW(255)
000aea 01fa      	MOVW R30,R20
000aeb 940e 0dc8 	CALL __ANEGW1
000aed 01af      	MOVW R20,R30
                 _0x202005A:
000aee 01fa      	MOVW R30,R20
000aef 0fee      	LSL  R30
000af0 1fff      	ROL  R31
000af1 87ef      	STD  Y+15,R30
000af2 8bf8      	STD  Y+15+1,R31
000af3 89a9      	LDD  R26,Y+17
000af4 27bb      	CLR  R27
000af5 89eb      	LDD  R30,Y+19
000af6 e0f0      	LDI  R31,0
000af7 1bae      	SUB  R26,R30
000af8 0bbf      	SBC  R27,R31
000af9 87ad      	STD  Y+13,R26
000afa 87be      	STD  Y+13+1,R27
000afb 85ae      	LDD  R26,Y+14
000afc 23aa      	TST  R26
000afd f43a      	BRPL _0x202005B
000afe ef2f      	LDI  R18,LOW(255)
000aff 85ed      	LDD  R30,Y+13
000b00 85fe      	LDD  R31,Y+13+1
000b01 940e 0dc8 	CALL __ANEGW1
000b03 87ed      	STD  Y+13,R30
000b04 87fe      	STD  Y+13+1,R31
                 _0x202005B:
000b05 85ed      	LDD  R30,Y+13
000b06 85fe      	LDD  R31,Y+13+1
000b07 0fee      	LSL  R30
000b08 1fff      	ROL  R31
000b09 87eb      	STD  Y+11,R30
000b0a 87fc      	STD  Y+11+1,R31
000b0b 931a      	ST   -Y,R17
000b0c 933a      	ST   -Y,R19
000b0d e0a1      	LDI  R26,LOW(1)
000b0e df27      	RCALL _glcd_putpixelm_G101
000b0f 87e8      	STD  Y+8,R30
000b10 e0e0      	LDI  R30,LOW(0)
000b11 87e9      	STD  Y+9,R30
000b12 87ea      	STD  Y+9+1,R30
000b13 85ad      	LDD  R26,Y+13
000b14 85be      	LDD  R27,Y+13+1
000b15 174a      	CP   R20,R26
000b16 075b      	CPC  R21,R27
000b17 f0bc      	BRLT _0x202005C
                 _0x202005E:
000b18 0f10      	ADD  R17,R16
000b19 85eb      	LDD  R30,Y+11
000b1a 85fc      	LDD  R31,Y+11+1
000b1b 940e 0db0 	CALL SUBOPT_0x3B
000b1d 85a9      	LDD  R26,Y+9
000b1e 85ba      	LDD  R27,Y+9+1
000b1f 174a      	CP   R20,R26
000b20 075b      	CPC  R21,R27
000b21 f42c      	BRGE _0x2020060
000b22 0f32      	ADD  R19,R18
000b23 85af      	LDD  R26,Y+15
000b24 89b8      	LDD  R27,Y+15+1
000b25 940e 0db7 	CALL SUBOPT_0x3C
                 _0x2020060:
000b27 931a      	ST   -Y,R17
000b28 940e 0dac 	CALL SUBOPT_0x3A
000b2a 87e8      	STD  Y+8,R30
000b2b 89ea      	LDD  R30,Y+18
000b2c 17e1      	CP   R30,R17
000b2d f751      	BRNE _0x202005E
000b2e c018      	RJMP _0x2020061
                 _0x202005C:
                 _0x2020063:
000b2f 0f32      	ADD  R19,R18
000b30 85ef      	LDD  R30,Y+15
000b31 89f8      	LDD  R31,Y+15+1
000b32 940e 0db0 	CALL SUBOPT_0x3B
000b34 85ed      	LDD  R30,Y+13
000b35 85fe      	LDD  R31,Y+13+1
000b36 85a9      	LDD  R26,Y+9
000b37 85ba      	LDD  R27,Y+9+1
000b38 17ea      	CP   R30,R26
000b39 07fb      	CPC  R31,R27
000b3a f42c      	BRGE _0x2020065
000b3b 0f10      	ADD  R17,R16
000b3c 85ab      	LDD  R26,Y+11
000b3d 85bc      	LDD  R27,Y+11+1
000b3e 940e 0db7 	CALL SUBOPT_0x3C
                 _0x2020065:
000b40 931a      	ST   -Y,R17
000b41 940e 0dac 	CALL SUBOPT_0x3A
000b43 87e8      	STD  Y+8,R30
000b44 89e9      	LDD  R30,Y+17
000b45 17e3      	CP   R30,R19
000b46 f741      	BRNE _0x2020063
                 _0x2020061:
000b47 89eb      	LDD  R30,Y+19
000b48 5fef      	SUBI R30,-LOW(1)
000b49 8beb      	STD  Y+19,R30
000b4a 89e9      	LDD  R30,Y+17
000b4b 5fef      	SUBI R30,-LOW(1)
000b4c 8be9      	STD  Y+17,R30
000b4d cf89      	RJMP _0x2020057
                 _0x2020059:
                 _0x2020056:
                 _0x202004C:
                 _0x2100005:
000b4e 940e 0e55 	CALL __LOADLOCR6
000b50 9665      	ADIW R28,21
000b51 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000b52 93ba      	ST   -Y,R27
000b53 93aa      	ST   -Y,R26
000b54 81b9          ldd  r27,y+1
000b55 81a8          ld   r26,y
000b56 9610          adiw r26,0
000b57 f031          breq memset1
000b58 81fc          ldd  r31,y+4
000b59 81eb          ldd  r30,y+3
000b5a 816a          ldd  r22,y+2
                 memset0:
000b5b 9361          st   z+,r22
000b5c 9711          sbiw r26,1
000b5d f7e9          brne memset0
                 memset1:
000b5e 81eb          ldd  r30,y+3
000b5f 81fc          ldd  r31,y+4
                 _0x2100004:
000b60 9625      	ADIW R28,5
000b61 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _glcd_getmask:
                 ; .FSTART _glcd_getmask
000b62 93aa      	ST   -Y,R26
000b63 81e8      	LD   R30,Y
000b64 e0f0      	LDI  R31,0
000b65 59e6      	SUBI R30,LOW(-__glcd_mask*2)
000b66 4ffd      	SBCI R31,HIGH(-__glcd_mask*2)
000b67 91a4      	LPM  R26,Z
000b68 81e9      	LDD  R30,Y+1
000b69 940e 0dcc 	CALL __LSLB12
                 _0x2100003:
000b6b 9622      	ADIW R28,2
000b6c 9508      	RET
                 ; .FEND
                 _glcd_mappixcolor1bit:
                 ; .FSTART _glcd_mappixcolor1bit
000b6d 93aa      	ST   -Y,R26
000b6e 931a      	ST   -Y,R17
000b6f 81e9      	LDD  R30,Y+1
000b70 30e7      	CPI  R30,LOW(0x7)
000b71 f011      	BREQ _0x2080007
000b72 30ea      	CPI  R30,LOW(0xA)
000b73 f419      	BRNE _0x2080008
                 _0x2080007:
000b74 9110 0200 	LDS  R17,_glcd_state
000b76 c009      	RJMP _0x2080009
                 _0x2080008:
000b77 30e9      	CPI  R30,LOW(0x9)
000b78 f419      	BRNE _0x208000B
                +
000b79 9110 0201+LDS R17 , _glcd_state + ( 1 )
                 	__GETBRMN 17,_glcd_state,1
000b7b c004      	RJMP _0x2080009
                 _0x208000B:
000b7c 30e8      	CPI  R30,LOW(0x8)
000b7d f4a1      	BRNE _0x2080005
                +
000b7e 9110 0210+LDS R17 , _glcd_state + ( 16 )
                 	__GETBRMN 17,_glcd_state,16
                 _0x2080009:
                +
000b80 91e0 0201+LDS R30 , _glcd_state + ( 1 )
                 	__GETB1MN _glcd_state,1
000b82 30e0      	CPI  R30,0
000b83 f049      	BREQ _0x208000E
000b84 3010      	CPI  R17,0
000b85 f019      	BREQ _0x208000F
000b86 efef      	LDI  R30,LOW(255)
000b87 8118      	LDD  R17,Y+0
000b88 c029      	RJMP _0x2100002
                 _0x208000F:
000b89 81ea      	LDD  R30,Y+2
000b8a 95e0      	COM  R30
000b8b 8118      	LDD  R17,Y+0
000b8c c025      	RJMP _0x2100002
                 _0x208000E:
000b8d 3010      	CPI  R17,0
000b8e f419      	BRNE _0x2080011
000b8f e0e0      	LDI  R30,LOW(0)
000b90 8118      	LDD  R17,Y+0
000b91 c020      	RJMP _0x2100002
                 _0x2080011:
                 _0x2080005:
000b92 81ea      	LDD  R30,Y+2
000b93 8118      	LDD  R17,Y+0
000b94 c01d      	RJMP _0x2100002
                 ; .FEND
                 _glcd_readmem:
                 ; .FSTART _glcd_readmem
000b95 93ba      	ST   -Y,R27
000b96 93aa      	ST   -Y,R26
000b97 81ea      	LDD  R30,Y+2
000b98 30e1      	CPI  R30,LOW(0x1)
000b99 f421      	BRNE _0x2080015
000b9a 81e8      	LD   R30,Y
000b9b 81f9      	LDD  R31,Y+1
000b9c 91e4      	LPM  R30,Z
000b9d c014      	RJMP _0x2100002
                 _0x2080015:
000b9e 30e2      	CPI  R30,LOW(0x2)
000b9f f429      	BRNE _0x2080016
000ba0 81a8      	LD   R26,Y
000ba1 81b9      	LDD  R27,Y+1
000ba2 940e 0e2d 	CALL __EEPROMRDB
000ba4 c00d      	RJMP _0x2100002
                 _0x2080016:
000ba5 30e3      	CPI  R30,LOW(0x3)
000ba6 f441      	BRNE _0x2080018
000ba7 81a8      	LD   R26,Y
000ba8 81b9      	LDD  R27,Y+1
                +
000ba9 91e0 0219+LDS R30 , _glcd_state + ( 25 )
000bab 91f0 021a+LDS R31 , _glcd_state + ( 25 ) + 1
000bad 9509     +ICALL
                 	__CALL1MN _glcd_state,25
000bae c003      	RJMP _0x2100002
                 _0x2080018:
000baf 81a8      	LD   R26,Y
000bb0 81b9      	LDD  R27,Y+1
000bb1 91ec      	LD   R30,X
                 _0x2100002:
000bb2 9623      	ADIW R28,3
000bb3 9508      	RET
                 ; .FEND
                 _glcd_writemem:
                 ; .FSTART _glcd_writemem
000bb4 93aa      	ST   -Y,R26
000bb5 81eb      	LDD  R30,Y+3
000bb6 30e0      	CPI  R30,0
000bb7 f429      	BRNE _0x208001C
000bb8 81e8      	LD   R30,Y
000bb9 81a9      	LDD  R26,Y+1
000bba 81ba      	LDD  R27,Y+1+1
000bbb 93ec      	ST   X,R30
000bbc c014      	RJMP _0x208001B
                 _0x208001C:
000bbd 30e2      	CPI  R30,LOW(0x2)
000bbe f431      	BRNE _0x208001D
000bbf 81e8      	LD   R30,Y
000bc0 81a9      	LDD  R26,Y+1
000bc1 81ba      	LDD  R27,Y+1+1
000bc2 940e 0e39 	CALL __EEPROMWRB
000bc4 c00c      	RJMP _0x208001B
                 _0x208001D:
000bc5 30e3      	CPI  R30,LOW(0x3)
000bc6 f451      	BRNE _0x208001B
000bc7 81e9      	LDD  R30,Y+1
000bc8 81fa      	LDD  R31,Y+1+1
000bc9 93fa      	ST   -Y,R31
000bca 93ea      	ST   -Y,R30
000bcb 81aa      	LDD  R26,Y+2
                +
000bcc 91e0 021b+LDS R30 , _glcd_state + ( 27 )
000bce 91f0 021c+LDS R31 , _glcd_state + ( 27 ) + 1
000bd0 9509     +ICALL
                 	__CALL1MN _glcd_state,27
                 _0x208001B:
                 _0x2100001:
000bd1 9624      	ADIW R28,4
000bd2 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _glcd_state:
000200           	.BYTE 0x1D
                 _init:
00021d           	.BYTE 0x8
                 _cells:
000225           	.BYTE 0xAF
                 _gfx_addr_G100:
0002d4           	.BYTE 0x2
                 _gfx_buffer_G100:
0002d6           	.BYTE 0x1F8
                 __seed_G106:
0004ce           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
000bd3 93ba      	ST   -Y,R27
000bd4 93aa      	ST   -Y,R26
000bd5 940e 0e50 	CALL __SAVELOCR4
                +
000bd7 e000     +LDI R16 , LOW ( 0 )
000bd8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000bd9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000bda 01f8      	MOVW R30,R16
                +
000bdb 816c     +LDD R22 , Y + 4
000bdc 817d     +LDD R23 , Y + 4 + 1
                 	__GETWRS 22,23,4
000bdd e2a3      	LDI  R26,LOW(35)
000bde e0b0      	LDI  R27,HIGH(35)
000bdf 940e 0de5 	CALL __MULW12U
000be1 01db      	MOVW R26,R22
000be2 0fae      	ADD  R26,R30
000be3 1fbf      	ADC  R27,R31
000be4 01f9      	MOVW R30,R18
000be5 01bd      	MOVW R22,R26
000be6 e0a7      	LDI  R26,LOW(7)
000be7 e0b0      	LDI  R27,HIGH(7)
000be8 940e 0de5 	CALL __MULW12U
000bea 0fe6      	ADD  R30,R22
000beb 1ff7      	ADC  R31,R23
000bec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:87 WORDS
                 SUBOPT_0x2:
000bed 01f8      	MOVW R30,R16
                +
000bee 816c     +LDD R22 , Y + 4
000bef 817d     +LDD R23 , Y + 4 + 1
                 	__GETWRS 22,23,4
000bf0 e2a3      	LDI  R26,LOW(35)
000bf1 e0b0      	LDI  R27,HIGH(35)
000bf2 940e 0de5 	CALL __MULW12U
000bf4 01db      	MOVW R26,R22
000bf5 0fae      	ADD  R26,R30
000bf6 1fbf      	ADC  R27,R31
000bf7 01f9      	MOVW R30,R18
000bf8 01bd      	MOVW R22,R26
000bf9 e0a7      	LDI  R26,LOW(7)
000bfa e0b0      	LDI  R27,HIGH(7)
000bfb 940e 0de5 	CALL __MULW12U
000bfd 01db      	MOVW R26,R22
000bfe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000bff 93ea      	ST   -Y,R30
000c00 81e9      	LDD  R30,Y+1
000c01 93ea      	ST   -Y,R30
000c02 81ec      	LDD  R30,Y+4
000c03 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000c04 5fe0      	SUBI R30,-LOW(16)
000c05 93ea      	ST   -Y,R30
000c06 81ab      	LDD  R26,Y+3
000c07 5fa7      	SUBI R26,-LOW(9)
000c08 940c 0a5c 	JMP  _glcd_line
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000c0a e0e1      	LDI  R30,LOW(1)
                +
000c0b 93e0 0208+STS _glcd_state + ( 8 ) , R30
                 	__PUTB1MN _glcd_state,8
000c0d efef      	LDI  R30,LOW(255)
                +
000c0e 93e0 0209+STS _glcd_state + ( 9 ) , R30
                 	__PUTB1MN _glcd_state,9
000c10 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000c11 81ea      	LDD  R30,Y+2
000c12 81fb      	LDD  R31,Y+2+1
000c13 93fa      	ST   -Y,R31
000c14 93ea      	ST   -Y,R30
000c15 81aa      	LDD  R26,Y+2
000c16 81bb      	LDD  R27,Y+2+1
000c17 940c 01ac 	JMP  _drawCell
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x7:
000c19 81ea      	LDD  R30,Y+2
000c1a 81fb      	LDD  R31,Y+2+1
                +
000c1b 8568     +LDD R22 , Y + 8
000c1c 8579     +LDD R23 , Y + 8 + 1
                 	__GETWRS 22,23,8
000c1d e2a3      	LDI  R26,LOW(35)
000c1e e0b0      	LDI  R27,HIGH(35)
000c1f 940e 0de5 	CALL __MULW12U
000c21 01db      	MOVW R26,R22
000c22 0fae      	ADD  R26,R30
000c23 1fbf      	ADC  R27,R31
000c24 81e8      	LD   R30,Y
000c25 81f9      	LDD  R31,Y+1
000c26 01bd      	MOVW R22,R26
000c27 e0a7      	LDI  R26,LOW(7)
000c28 e0b0      	LDI  R27,HIGH(7)
000c29 940e 0de5 	CALL __MULW12U
000c2b 01db      	MOVW R26,R22
000c2c 0fae      	ADD  R26,R30
000c2d 1fbf      	ADC  R27,R31
000c2e 9614      	ADIW R26,4
000c2f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
000c30 81ac      	LDD  R26,Y+4
000c31 81bd      	LDD  R27,Y+4+1
000c32 9711      	SBIW R26,1
000c33 23bb      	TST  R27
000c34 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:61 WORDS
                 SUBOPT_0x9:
000c35 81ec      	LDD  R30,Y+4
000c36 81fd      	LDD  R31,Y+4+1
000c37 9731      	SBIW R30,1
                +
000c38 8168     +LDD R22 , Y + 0
000c39 8179     +LDD R23 , Y + 0 + 1
                 	__GETWRS 22,23,0
000c3a e2a3      	LDI  R26,LOW(35)
000c3b e0b0      	LDI  R27,HIGH(35)
000c3c 940e 0de5 	CALL __MULW12U
000c3e 01db      	MOVW R26,R22
000c3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xA:
000c40 0fae      	ADD  R26,R30
000c41 1fbf      	ADC  R27,R31
000c42 81ea      	LDD  R30,Y+2
000c43 81fb      	LDD  R31,Y+2+1
000c44 01bd      	MOVW R22,R26
000c45 e0a7      	LDI  R26,LOW(7)
000c46 e0b0      	LDI  R27,HIGH(7)
000c47 940e 0de5 	CALL __MULW12U
000c49 01db      	MOVW R26,R22
000c4a 0fae      	ADD  R26,R30
000c4b 1fbf      	ADC  R27,R31
000c4c 9614      	ADIW R26,4
000c4d 91ec      	LD   R30,X
000c4e 30e0      	CPI  R30,0
000c4f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xB:
000c50 e0e1      	LDI  R30,LOW(1)
000c51 e0f0      	LDI  R31,HIGH(1)
                +
000c52 0e7e     +ADD R7 , R30
000c53 1e8f     +ADC R8 , R31
                 	__ADDWRR 7,8,30,31
000c54 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
000c55 81ac      	LDD  R26,Y+4
000c56 81bd      	LDD  R27,Y+4+1
000c57 9611      	ADIW R26,1
000c58 9715      	SBIW R26,5
000c59 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:61 WORDS
                 SUBOPT_0xD:
000c5a 81ec      	LDD  R30,Y+4
000c5b 81fd      	LDD  R31,Y+4+1
000c5c 9631      	ADIW R30,1
                +
000c5d 8168     +LDD R22 , Y + 0
000c5e 8179     +LDD R23 , Y + 0 + 1
                 	__GETWRS 22,23,0
000c5f e2a3      	LDI  R26,LOW(35)
000c60 e0b0      	LDI  R27,HIGH(35)
000c61 940e 0de5 	CALL __MULW12U
000c63 01db      	MOVW R26,R22
000c64 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xE:
000c65 81aa      	LDD  R26,Y+2
000c66 81bb      	LDD  R27,Y+2+1
000c67 9711      	SBIW R26,1
000c68 23bb      	TST  R27
000c69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:52 WORDS
                 SUBOPT_0xF:
000c6a 81ec      	LDD  R30,Y+4
000c6b 81fd      	LDD  R31,Y+4+1
                +
000c6c 8168     +LDD R22 , Y + 0
000c6d 8179     +LDD R23 , Y + 0 + 1
                 	__GETWRS 22,23,0
000c6e e2a3      	LDI  R26,LOW(35)
000c6f e0b0      	LDI  R27,HIGH(35)
000c70 940e 0de5 	CALL __MULW12U
000c72 01db      	MOVW R26,R22
000c73 0fae      	ADD  R26,R30
000c74 1fbf      	ADC  R27,R31
000c75 81ea      	LDD  R30,Y+2
000c76 81fb      	LDD  R31,Y+2+1
000c77 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x10:
000c78 9731      	SBIW R30,1
000c79 01bd      	MOVW R22,R26
000c7a e0a7      	LDI  R26,LOW(7)
000c7b e0b0      	LDI  R27,HIGH(7)
000c7c 940e 0de5 	CALL __MULW12U
000c7e 01db      	MOVW R26,R22
000c7f 0fae      	ADD  R26,R30
000c80 1fbf      	ADC  R27,R31
000c81 9614      	ADIW R26,4
000c82 91ec      	LD   R30,X
000c83 30e0      	CPI  R30,0
000c84 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
000c85 81aa      	LDD  R26,Y+2
000c86 81bb      	LDD  R27,Y+2+1
000c87 9611      	ADIW R26,1
000c88 9715      	SBIW R26,5
000c89 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x12:
000c8a 9631      	ADIW R30,1
000c8b 01bd      	MOVW R22,R26
000c8c e0a7      	LDI  R26,LOW(7)
000c8d e0b0      	LDI  R27,HIGH(7)
000c8e 940e 0de5 	CALL __MULW12U
000c90 01db      	MOVW R26,R22
000c91 0fae      	ADD  R26,R30
000c92 1fbf      	ADC  R27,R31
000c93 9614      	ADIW R26,4
000c94 91ec      	LD   R30,X
000c95 30e0      	CPI  R30,0
000c96 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000c97 0fae      	ADD  R26,R30
000c98 1fbf      	ADC  R27,R31
000c99 81ea      	LDD  R30,Y+2
000c9a 81fb      	LDD  R31,Y+2+1
000c9b cfdc      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000c9c 0fae      	ADD  R26,R30
000c9d 1fbf      	ADC  R27,R31
000c9e 81ea      	LDD  R30,Y+2
000c9f 81fb      	LDD  R31,Y+2+1
000ca0 cfe9      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x15:
000ca1 0fae      	ADD  R26,R30
000ca2 1fbf      	ADC  R27,R31
000ca3 9615      	ADIW R26,5
000ca4 91ec      	LD   R30,X
000ca5 30e0      	CPI  R30,0
000ca6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x16:
000ca7 e1a0      	LDI  R26,LOW(16)
000ca8 020a      	MULS R16,R26
000ca9 01f0      	MOVW R30,R0
000caa 5fe8      	SUBI R30,-LOW(8)
000cab 93ea      	ST   -Y,R30
000cac e0a9      	LDI  R26,LOW(9)
000cad 022a      	MULS R18,R26
000cae 01f0      	MOVW R30,R0
000caf 5fed      	SUBI R30,-LOW(3)
000cb0 93ea      	ST   -Y,R30
000cb1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x17:
000cb2 931a      	ST   -Y,R17
000cb3 930a      	ST   -Y,R16
000cb4 933a      	ST   -Y,R19
000cb5 932a      	ST   -Y,R18
000cb6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x18:
000cb7 81ec      	LDD  R30,Y+4
000cb8 81fd      	LDD  R31,Y+4+1
000cb9 9731      	SBIW R30,1
000cba 93fa      	ST   -Y,R31
000cbb 93ea      	ST   -Y,R30
000cbc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x19:
000cbd 81ec      	LDD  R30,Y+4
000cbe 81fd      	LDD  R31,Y+4+1
000cbf 93fa      	ST   -Y,R31
000cc0 93ea      	ST   -Y,R30
000cc1 81ac      	LDD  R26,Y+4
000cc2 81bd      	LDD  R27,Y+4+1
000cc3 940e 0251 	CALL _adjacentBombs
000cc5 33e0      	CPI  R30,LOW(0x30)
000cc6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1A:
000cc7 0fae      	ADD  R26,R30
000cc8 1fbf      	ADC  R27,R31
000cc9 81ea      	LDD  R30,Y+2
000cca 81fb      	LDD  R31,Y+2+1
000ccb 01bd      	MOVW R22,R26
000ccc e0a7      	LDI  R26,LOW(7)
000ccd e0b0      	LDI  R27,HIGH(7)
000cce 940e 0de5 	CALL __MULW12U
000cd0 01db      	MOVW R26,R22
000cd1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x1B:
000cd2 0fae      	ADD  R26,R30
000cd3 1fbf      	ADC  R27,R31
000cd4 9614      	ADIW R26,4
000cd5 91ac      	LD   R26,X
000cd6 30a0      	CPI  R26,LOW(0x0)
000cd7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x1C:
000cd8 0fae      	ADD  R26,R30
000cd9 1fbf      	ADC  R27,R31
000cda 9616      	ADIW R26,6
000cdb e0e1      	LDI  R30,LOW(1)
000cdc 93ec      	ST   X,R30
000cdd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1D:
000cde 81ec      	LDD  R30,Y+4
000cdf 81fd      	LDD  R31,Y+4+1
000ce0 9631      	ADIW R30,1
000ce1 93fa      	ST   -Y,R31
000ce2 93ea      	ST   -Y,R30
000ce3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
000ce4 81ec      	LDD  R30,Y+4
000ce5 81fd      	LDD  R31,Y+4+1
000ce6 93fa      	ST   -Y,R31
000ce7 93ea      	ST   -Y,R30
000ce8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1F:
000ce9 81ac      	LDD  R26,Y+4
000cea 81bd      	LDD  R27,Y+4+1
000ceb 940e 0251 	CALL _adjacentBombs
000ced 33e0      	CPI  R30,LOW(0x30)
000cee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x20:
000cef 9731      	SBIW R30,1
000cf0 01bd      	MOVW R22,R26
000cf1 e0a7      	LDI  R26,LOW(7)
000cf2 e0b0      	LDI  R27,HIGH(7)
000cf3 940e 0de5 	CALL __MULW12U
000cf5 01db      	MOVW R26,R22
000cf6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x21:
000cf7 9631      	ADIW R30,1
000cf8 01bd      	MOVW R22,R26
000cf9 e0a7      	LDI  R26,LOW(7)
000cfa e0b0      	LDI  R27,HIGH(7)
000cfb 940e 0de5 	CALL __MULW12U
000cfd 01db      	MOVW R26,R22
000cfe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x22:
000cff 0fae      	ADD  R26,R30
000d00 1fbf      	ADC  R27,R31
000d01 81ea      	LDD  R30,Y+2
000d02 81fb      	LDD  R31,Y+2+1
000d03 cfeb      	RJMP SUBOPT_0x20
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x23:
000d04 0fae      	ADD  R26,R30
000d05 1fbf      	ADC  R27,R31
000d06 81ea      	LDD  R30,Y+2
000d07 81fb      	LDD  R31,Y+2+1
000d08 cfee      	RJMP SUBOPT_0x21
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:105 WORDS
                 SUBOPT_0x24:
                +
000d09 e2a3     +LDI R26 , 35
000d0a 9fa0     +MUL R26 , R16
000d0b 01f0     +MOVW R30 , R0
000d0c 9fa1     +MUL R26 , R17
000d0d 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,35
000d0e 5deb      	SUBI R30,LOW(-_cells)
000d0f 4ffd      	SBCI R31,HIGH(-_cells)
000d10 01df      	MOVW R26,R30
000d11 01f9      	MOVW R30,R18
000d12 01bd      	MOVW R22,R26
000d13 e0a7      	LDI  R26,LOW(7)
000d14 e0b0      	LDI  R27,HIGH(7)
000d15 940e 0de5 	CALL __MULW12U
000d17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
000d18 e0e0      	LDI  R30,LOW(0)
000d19 e0f0      	LDI  R31,HIGH(0)
000d1a 93fa      	ST   -Y,R31
000d1b 93ea      	ST   -Y,R30
000d1c e0a0      	LDI  R26,LOW(0)
000d1d e0b0      	LDI  R27,0
000d1e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
000d1f e2a5      	LDI  R26,LOW(_cells)
000d20 e0b2      	LDI  R27,HIGH(_cells)
000d21 940c 0214 	JMP  _generateBombs
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x27:
000d23 e1ae      	LDI  R26,LOW(30)
000d24 e0b0      	LDI  R27,0
000d25 940c 0dbe 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x28:
000d27 e2a5      	LDI  R26,LOW(_cells)
000d28 e0b2      	LDI  R27,HIGH(_cells)
000d29 940c 0440 	JMP  _display
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x29:
000d2b 940e 06ad 	CALL _glcd_clear
000d2d cf84      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2A:
000d2e eda4      	LDI  R26,LOW(_gfx_addr_G100)
000d2f e0b2      	LDI  R27,HIGH(_gfx_addr_G100)
000d30 91ed      	LD   R30,X+
000d31 91fd      	LD   R31,X+
000d32 9631      	ADIW R30,1
000d33 93fe      	ST   -X,R31
000d34 93ee      	ST   -X,R30
000d35 9731      	SBIW R30,1
000d36 52ea      	SUBI R30,LOW(-_gfx_buffer_G100)
000d37 4ffd      	SBCI R31,HIGH(-_gfx_buffer_G100)
000d38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
000d39 0fea      	ADD  R30,R26
000d3a 1ffb      	ADC  R31,R27
000d3b 83ee      	STD  Y+6,R30
000d3c 83ff      	STD  Y+6+1,R31
000d3d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2C:
000d3e 85ec      	LDD  R30,Y+12
000d3f 93ea      	ST   -Y,R30
000d40 81ef      	LDD  R30,Y+7
000d41 85f8      	LDD  R31,Y+7+1
000d42 9631      	ADIW R30,1
000d43 83ef      	STD  Y+7,R30
000d44 87f8      	STD  Y+7+1,R31
000d45 9731      	SBIW R30,1
000d46 93fa      	ST   -Y,R31
000d47 93ea      	ST   -Y,R30
000d48 e0a0      	LDI  R26,LOW(0)
000d49 940c 0bb4 	JMP  _glcd_writemem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2D:
000d4b 930a      	ST   -Y,R16
000d4c 89a8      	LDD  R26,Y+16
000d4d 940c 05ed 	JMP  _pcd8544_setaddr_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2E:
000d4f 85ec      	LDD  R30,Y+12
000d50 93ea      	ST   -Y,R30
000d51 81ef      	LDD  R30,Y+7
000d52 85f8      	LDD  R31,Y+7+1
000d53 9631      	ADIW R30,1
000d54 83ef      	STD  Y+7,R30
000d55 87f8      	STD  Y+7+1,R31
000d56 9731      	SBIW R30,1
000d57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2F:
000d58 2766      	CLR  R22
000d59 2777      	CLR  R23
000d5a 01df      	MOVW R26,R30
000d5b 01cb      	MOVW R24,R22
000d5c 940c 0b95 	JMP  _glcd_readmem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
000d5e 935a      	ST   -Y,R21
000d5f 85aa      	LDD  R26,Y+10
000d60 940c 0b6d 	JMP  _glcd_mappixcolor1bit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x31:
000d62 930a      	ST   -Y,R16
000d63 9503      	INC  R16
000d64 89e8      	LDD  R30,Y+16
000d65 93ea      	ST   -Y,R30
000d66 935a      	ST   -Y,R21
000d67 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x32:
000d68 2f5e      	MOV  R21,R30
000d69 85ec      	LDD  R30,Y+12
000d6a 93ea      	ST   -Y,R30
000d6b 81af      	LDD  R26,Y+7
000d6c 85b8      	LDD  R27,Y+7+1
000d6d 2788      	CLR  R24
000d6e 2799      	CLR  R25
000d6f 940e 0b95 	CALL _glcd_readmem
000d71 2e1e      	MOV  R1,R30
000d72 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x33:
000d73 930a      	ST   -Y,R16
000d74 9503      	INC  R16
000d75 89e8      	LDD  R30,Y+16
000d76 93ea      	ST   -Y,R30
000d77 85ee      	LDD  R30,Y+14
000d78 93ea      	ST   -Y,R30
000d79 85e9      	LDD  R30,Y+9
000d7a 85fa      	LDD  R31,Y+9+1
000d7b 9631      	ADIW R30,1
000d7c 87e9      	STD  Y+9,R30
000d7d 87fa      	STD  Y+9+1,R31
000d7e 9731      	SBIW R30,1
000d7f cfd8      	RJMP SUBOPT_0x2F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x34:
000d80 93ba      	ST   -Y,R27
000d81 93aa      	ST   -Y,R26
000d82 81a8      	LD   R26,Y
000d83 81b9      	LDD  R27,Y+1
000d84 940e 0e4a 	CALL __CPW02
000d86 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
000d87 940e 0e4e 	CALL __SAVELOCR6
                +
000d89 91e0 0204+LDS R30 , _glcd_state + ( 4 )
000d8b 91f0 0205+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
000d8d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
000d8e 01f8      	MOVW R30,R16
                +
000d8f 5f0f     +SUBI R16 , LOW ( - 1 )
000d90 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000d91 9004      	LPM  R0,Z
000d92 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x37:
                +
000d93 91e0 0204+LDS R30 , _glcd_state + ( 4 )
000d95 91f0 0205+LDS R31 , _glcd_state + ( 4 ) + 1
                 	__GETW1MN _glcd_state,4
000d97 9631      	ADIW R30,1
000d98 91e4      	LPM  R30,Z
000d99 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x38:
000d9a 93ea      	ST   -Y,R30
000d9b e0e0      	LDI  R30,LOW(0)
000d9c 93ea      	ST   -Y,R30
000d9d e0e0      	LDI  R30,LOW(0)
000d9e e0f0      	LDI  R31,HIGH(0)
000d9f 93fa      	ST   -Y,R31
000da0 93ea      	ST   -Y,R30
000da1 e0a9      	LDI  R26,LOW(9)
000da2 940c 072a 	JMP  _glcd_block
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x39:
000da4 81ae      	LDD  R26,Y+6
000da5 5faf      	SUBI R26,-LOW(1)
000da6 83ae      	STD  Y+6,R26
000da7 50a1      	SUBI R26,LOW(1)
                +
000da8 91e0 0208+LDS R30 , _glcd_state + ( 8 )
                 	__GETB1MN _glcd_state,8
000daa 17ae      	CP   R26,R30
000dab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000dac 933a      	ST   -Y,R19
000dad 85aa      	LDD  R26,Y+10
000dae 940c 0a36 	JMP  _glcd_putpixelm_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3B:
000db0 85a9      	LDD  R26,Y+9
000db1 85ba      	LDD  R27,Y+9+1
000db2 0fea      	ADD  R30,R26
000db3 1ffb      	ADC  R31,R27
000db4 87e9      	STD  Y+9,R30
000db5 87fa      	STD  Y+9+1,R31
000db6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3C:
000db7 85e9      	LDD  R30,Y+9
000db8 85fa      	LDD  R31,Y+9+1
000db9 1bea      	SUB  R30,R26
000dba 0bfb      	SBC  R31,R27
000dbb 87e9      	STD  Y+9,R30
000dbc 87fa      	STD  Y+9+1,R31
000dbd 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000dbe 9610      	adiw r26,0
000dbf f039      	breq __delay_ms1
                 __delay_ms0:
                +
000dc0 e888     +LDI R24 , LOW ( 0x1388 )
000dc1 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
000dc2 9701     +SBIW R24 , 1
000dc3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
000dc4 95a8      	wdr
000dc5 9711      	sbiw r26,1
000dc6 f7c9      	brne __delay_ms0
                 __delay_ms1:
000dc7 9508      	ret
                 
                 __ANEGW1:
000dc8 95f1      	NEG  R31
000dc9 95e1      	NEG  R30
000dca 40f0      	SBCI R31,0
000dcb 9508      	RET
                 
                 __LSLB12:
000dcc 23ee      	TST  R30
000dcd 2e0e      	MOV  R0,R30
000dce 2fea      	MOV  R30,R26
000dcf f019      	BREQ __LSLB12R
                 __LSLB12L:
000dd0 0fee      	LSL  R30
000dd1 940a      	DEC  R0
000dd2 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
000dd3 9508      	RET
                 
                 __LSRB12:
000dd4 23ee      	TST  R30
000dd5 2e0e      	MOV  R0,R30
000dd6 2fea      	MOV  R30,R26
000dd7 f019      	BREQ __LSRB12R
                 __LSRB12L:
000dd8 95e6      	LSR  R30
000dd9 940a      	DEC  R0
000dda f7e9      	BRNE __LSRB12L
                 __LSRB12R:
000ddb 9508      	RET
                 
                 __LSLW4:
000ddc 0fee      	LSL  R30
000ddd 1fff      	ROL  R31
                 __LSLW3:
000dde 0fee      	LSL  R30
000ddf 1fff      	ROL  R31
                 __LSLW2:
000de0 0fee      	LSL  R30
000de1 1fff      	ROL  R31
000de2 0fee      	LSL  R30
000de3 1fff      	ROL  R31
000de4 9508      	RET
                 
                 __MULW12U:
000de5 9ffa      	MUL  R31,R26
000de6 2df0      	MOV  R31,R0
000de7 9feb      	MUL  R30,R27
000de8 0df0      	ADD  R31,R0
000de9 9fea      	MUL  R30,R26
000dea 2de0      	MOV  R30,R0
000deb 0df1      	ADD  R31,R1
000dec 9508      	RET
                 
                 __MULW12:
000ded d02d      	RCALL __CHKSIGNW
000dee dff6      	RCALL __MULW12U
000def f40e      	BRTC __MULW121
000df0 dfd7      	RCALL __ANEGW1
                 __MULW121:
000df1 9508      	RET
                 
                 __DIVW21U:
000df2 2400      	CLR  R0
000df3 2411      	CLR  R1
000df4 e190      	LDI  R25,16
                 __DIVW21U1:
000df5 0faa      	LSL  R26
000df6 1fbb      	ROL  R27
000df7 1c00      	ROL  R0
000df8 1c11      	ROL  R1
000df9 1a0e      	SUB  R0,R30
000dfa 0a1f      	SBC  R1,R31
000dfb f418      	BRCC __DIVW21U2
000dfc 0e0e      	ADD  R0,R30
000dfd 1e1f      	ADC  R1,R31
000dfe c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000dff 60a1      	SBR  R26,1
                 __DIVW21U3:
000e00 959a      	DEC  R25
000e01 f799      	BRNE __DIVW21U1
000e02 01fd      	MOVW R30,R26
000e03 01d0      	MOVW R26,R0
000e04 9508      	RET
                 
                 __DIVW21:
000e05 d015      	RCALL __CHKSIGNW
000e06 dfeb      	RCALL __DIVW21U
000e07 f40e      	BRTC __DIVW211
000e08 dfbf      	RCALL __ANEGW1
                 __DIVW211:
000e09 9508      	RET
                 
                 __MODW21U:
000e0a dfe7      	RCALL __DIVW21U
000e0b 01fd      	MOVW R30,R26
000e0c 9508      	RET
                 
                 __MODW21:
000e0d 94e8      	CLT
000e0e ffb7      	SBRS R27,7
000e0f c004      	RJMP __MODW211
000e10 95a0      	COM  R26
000e11 95b0      	COM  R27
000e12 9611      	ADIW R26,1
000e13 9468      	SET
                 __MODW211:
000e14 fdf7      	SBRC R31,7
000e15 dfb2      	RCALL __ANEGW1
000e16 dfdb      	RCALL __DIVW21U
000e17 01fd      	MOVW R30,R26
000e18 f40e      	BRTC __MODW212
000e19 dfae      	RCALL __ANEGW1
                 __MODW212:
000e1a 9508      	RET
                 
                 __CHKSIGNW:
000e1b 94e8      	CLT
000e1c fff7      	SBRS R31,7
000e1d c002      	RJMP __CHKSW1
000e1e dfa9      	RCALL __ANEGW1
000e1f 9468      	SET
                 __CHKSW1:
000e20 ffb7      	SBRS R27,7
000e21 c006      	RJMP __CHKSW2
000e22 95a0      	COM  R26
000e23 95b0      	COM  R27
000e24 9611      	ADIW R26,1
000e25 f800      	BLD  R0,0
000e26 9403      	INC  R0
000e27 fa00      	BST  R0,0
                 __CHKSW2:
000e28 9508      	RET
                 
                 __GETW1P:
000e29 91ed      	LD   R30,X+
000e2a 91fc      	LD   R31,X
000e2b 9711      	SBIW R26,1
000e2c 9508      	RET
                 
                 __EEPROMRDB:
000e2d 99f9      	SBIC EECR,EEWE
000e2e cffe      	RJMP __EEPROMRDB
000e2f 93ff      	PUSH R31
000e30 b7ff      	IN   R31,SREG
000e31 94f8      	CLI
000e32 bda1      	OUT  EEARL,R26
000e33 bdb2      	OUT  EEARH,R27
000e34 9af8      	SBI  EECR,EERE
000e35 b5e0      	IN   R30,EEDR
000e36 bfff      	OUT  SREG,R31
000e37 91ff      	POP  R31
000e38 9508      	RET
                 
                 __EEPROMWRB:
000e39 9bf9      	SBIS EECR,EEWE
000e3a c002      	RJMP __EEPROMWRB1
000e3b 95a8      	WDR
000e3c cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000e3d b79f      	IN   R25,SREG
000e3e 94f8      	CLI
000e3f bda1      	OUT  EEARL,R26
000e40 bdb2      	OUT  EEARH,R27
000e41 9af8      	SBI  EECR,EERE
000e42 b580      	IN   R24,EEDR
000e43 17e8      	CP   R30,R24
000e44 f019      	BREQ __EEPROMWRB0
000e45 bde0      	OUT  EEDR,R30
000e46 9afa      	SBI  EECR,EEMWE
000e47 9af9      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000e48 bf9f      	OUT  SREG,R25
000e49 9508      	RET
                 
                 __CPW02:
000e4a 2400      	CLR  R0
000e4b 160a      	CP   R0,R26
000e4c 060b      	CPC  R0,R27
000e4d 9508      	RET
                 
                 __SAVELOCR6:
000e4e 935a      	ST   -Y,R21
                 __SAVELOCR5:
000e4f 934a      	ST   -Y,R20
                 __SAVELOCR4:
000e50 933a      	ST   -Y,R19
                 __SAVELOCR3:
000e51 932a      	ST   -Y,R18
                 __SAVELOCR2:
000e52 931a      	ST   -Y,R17
000e53 930a      	ST   -Y,R16
000e54 9508      	RET
                 
                 __LOADLOCR6:
000e55 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000e56 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000e57 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e58 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e59 8119      	LDD  R17,Y+1
000e5a 8108      	LD   R16,Y
000e5b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  43 r1 :   9 r2 :   0 r3 :   3 r4 :   3 r5 :   6 r6 :   6 r7 :  11 
r8 :  11 r9 :   2 r10:   9 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  82 r17: 122 r18:  63 r19:  66 r20:  30 r21:  40 r22:  48 r23:   8 
r24:  13 r25:   8 r26: 442 r27: 165 r28:  21 r29:   1 r30: 878 r31: 237 
x  :  32 y  : 622 z  :  29 
Registers used: 29 out of 35 (82.9%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  45 add   :  58 
adiw  :  54 and   :  10 andi  :  12 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  45 
brge  :  29 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   6 brmi  :  12 brne  : 103 brpl  :   2 brsh  :  21 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 326 
cbi   :   7 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  36 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :  12 
cp    :  49 cpc   :  36 cpi   :  95 cpse  :   0 dec   :   4 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   5 jmp   :  68 ld    :  45 ldd   : 355 ldi   : 317 
lds   :  36 lpm   :  25 lsl   :  10 lsr   :  15 mov   : 104 movw  :  75 
mul   :   6 muls  :   2 mulsu :   0 neg   :   2 nop   :   0 or    :   7 
ori   :   7 out   :  13 pop   :  11 push  :  11 rcall :  81 ret   :  77 
reti  :   0 rjmp  : 178 rol   :   9 ror   :   0 sbc   :   4 sbci  :  26 
sbi   :  21 sbic  :  19 sbis  :   1 sbiw  :  33 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 189 std   :  78 sts   :  37 sub   :  14 subi  :  59 swap  :   0 
tst   :   7 wdr   :   8 
Instructions used: 70 out of 116 (60.3%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001cb8   6814    538   7352   16384  44.9%
[.dseg] 0x000100 0x0004d2      0    722    722    1024  70.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
